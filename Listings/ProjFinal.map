Component: Arm Compiler for Embedded 6.19 Tool: armlink [5e73cb00]

==============================================================================

Section Cross References

    main.o(.text.main) refers to rtx_kernel.o(.text.osKernelInitialize) for osKernelInitialize
    main.o(.text.main) refers to main.o(.text.ThreadCentral) for ThreadCentral
    main.o(.text.main) refers to rtx_thread.o(.text.osThreadNew) for osThreadNew
    main.o(.text.main) refers to main.o(.bss.tidCentral) for tidCentral
    main.o(.text.main) refers to main.o(.text.ThreadLeft) for ThreadLeft
    main.o(.text.main) refers to main.o(.bss.tidLeft) for tidLeft
    main.o(.text.main) refers to main.o(.text.ThreadRight) for ThreadRight
    main.o(.text.main) refers to main.o(.bss.tidRight) for tidRight
    main.o(.text.main) refers to main.o(.text.ThreadController) for ThreadController
    main.o(.text.main) refers to main.o(.bss.tidController) for tidController
    main.o(.text.main) refers to rtx_thread.o(.text.osThreadSetPriority) for osThreadSetPriority
    main.o(.text.main) refers to rtx_msgqueue.o(.text.osMessageQueueNew) for osMessageQueueNew
    main.o(.text.main) refers to main.o(.bss.qidController) for qidController
    main.o(.text.main) refers to main.o(.bss.qidCentralCommands) for qidCentralCommands
    main.o(.text.main) refers to main.o(.bss.qidCentralResponses) for qidCentralResponses
    main.o(.text.main) refers to main.o(.bss.qidLeftCommands) for qidLeftCommands
    main.o(.text.main) refers to main.o(.bss.qidLeftResponses) for qidLeftResponses
    main.o(.text.main) refers to main.o(.bss.qidRightCommands) for qidRightCommands
    main.o(.text.main) refers to main.o(.bss.qidRightResponses) for qidRightResponses
    main.o(.text.main) refers to rtx_kernel.o(.text.osKernelGetState) for osKernelGetState
    main.o(.text.main) refers to interrupt.o(i.IntMasterEnable) for IntMasterEnable
    main.o(.text.main) refers to main.o(.text.SetupUart) for SetupUart
    main.o(.text.main) refers to main.o(.text.InitElevators) for InitElevators
    main.o(.text.main) refers to rtx_kernel.o(.text.osKernelStart) for osKernelStart
    main.o(.ARM.exidx.text.main) refers to main.o(.text.main) for [Anonymous Symbol]
    main.o(.text.ThreadCentral) refers to main.o(.bss.elevators) for elevators
    main.o(.text.ThreadCentral) refers to main.o(.text.StopElevator) for StopElevator
    main.o(.text.ThreadCentral) refers to main.o(.text.ChangeButtonStatus) for ChangeButtonStatus
    main.o(.text.ThreadCentral) refers to main.o(.text.ChangeDoorStatus) for ChangeDoorStatus
    main.o(.text.ThreadCentral) refers to rtx_delay.o(.text.osDelay) for osDelay
    main.o(.text.ThreadCentral) refers to main.o(.bss.qidCentralResponses) for qidCentralResponses
    main.o(.text.ThreadCentral) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for osMessageQueueGet
    main.o(.text.ThreadCentral) refers to main.o(.text.GetFloorCharFromFloorNumberString) for GetFloorCharFromFloorNumberString
    main.o(.text.ThreadCentral) refers to main.o(.text.SetMovement) for SetMovement
    main.o(.text.ThreadCentral) refers to main.o(.bss.qidCentralCommands) for qidCentralCommands
    main.o(.ARM.exidx.text.ThreadCentral) refers to main.o(.text.ThreadCentral) for [Anonymous Symbol]
    main.o(.text.ThreadLeft) refers to main.o(.bss.elevators) for elevators
    main.o(.text.ThreadLeft) refers to main.o(.text.StopElevator) for StopElevator
    main.o(.text.ThreadLeft) refers to main.o(.text.ChangeButtonStatus) for ChangeButtonStatus
    main.o(.text.ThreadLeft) refers to main.o(.text.ChangeDoorStatus) for ChangeDoorStatus
    main.o(.text.ThreadLeft) refers to rtx_delay.o(.text.osDelay) for osDelay
    main.o(.text.ThreadLeft) refers to main.o(.bss.qidLeftResponses) for qidLeftResponses
    main.o(.text.ThreadLeft) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for osMessageQueueGet
    main.o(.text.ThreadLeft) refers to main.o(.text.GetFloorCharFromFloorNumberString) for GetFloorCharFromFloorNumberString
    main.o(.text.ThreadLeft) refers to main.o(.text.SetMovement) for SetMovement
    main.o(.text.ThreadLeft) refers to main.o(.bss.qidLeftCommands) for qidLeftCommands
    main.o(.ARM.exidx.text.ThreadLeft) refers to main.o(.text.ThreadLeft) for [Anonymous Symbol]
    main.o(.text.ThreadRight) refers to main.o(.bss.elevators) for elevators
    main.o(.text.ThreadRight) refers to main.o(.text.StopElevator) for StopElevator
    main.o(.text.ThreadRight) refers to main.o(.text.ChangeButtonStatus) for ChangeButtonStatus
    main.o(.text.ThreadRight) refers to main.o(.text.ChangeDoorStatus) for ChangeDoorStatus
    main.o(.text.ThreadRight) refers to rtx_delay.o(.text.osDelay) for osDelay
    main.o(.text.ThreadRight) refers to main.o(.bss.qidRightResponses) for qidRightResponses
    main.o(.text.ThreadRight) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for osMessageQueueGet
    main.o(.text.ThreadRight) refers to main.o(.text.GetFloorCharFromFloorNumberString) for GetFloorCharFromFloorNumberString
    main.o(.text.ThreadRight) refers to main.o(.text.SetMovement) for SetMovement
    main.o(.text.ThreadRight) refers to main.o(.bss.qidRightCommands) for qidRightCommands
    main.o(.ARM.exidx.text.ThreadRight) refers to main.o(.text.ThreadRight) for [Anonymous Symbol]
    main.o(.text.ThreadController) refers to main.o(.bss.qidController) for qidController
    main.o(.text.ThreadController) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for osMessageQueueGet
    main.o(.text.ThreadController) refers to main.o(.text.ChangeButtonStatus) for ChangeButtonStatus
    main.o(.text.ThreadController) refers to main.o(.bss.qidCentralResponses) for qidCentralResponses
    main.o(.text.ThreadController) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for osMessageQueuePut
    main.o(.text.ThreadController) refers to main.o(.bss.qidLeftResponses) for qidLeftResponses
    main.o(.text.ThreadController) refers to main.o(.bss.qidRightResponses) for qidRightResponses
    main.o(.text.ThreadController) refers to main.o(.text.GetFloorIntFromFloorNumberChar) for GetFloorIntFromFloorNumberChar
    main.o(.text.ThreadController) refers to main.o(.bss.elevators) for elevators
    main.o(.text.ThreadController) refers to siabs.o(.text) for abs
    main.o(.text.ThreadController) refers to main.o(.bss.qidCentralCommands) for qidCentralCommands
    main.o(.text.ThreadController) refers to main.o(.bss.qidLeftCommands) for qidLeftCommands
    main.o(.text.ThreadController) refers to main.o(.bss.qidRightCommands) for qidRightCommands
    main.o(.text.ThreadController) refers to rtx_thread.o(.text.osThreadYield) for osThreadYield
    main.o(.ARM.exidx.text.ThreadController) refers to main.o(.text.ThreadController) for [Anonymous Symbol]
    main.o(.text.SetupUart) refers to uart.o(.text.UART_Init) for UART_Init
    main.o(.text.SetupUart) refers to main.o(.text.UARTIntHandler) for UARTIntHandler
    main.o(.text.SetupUart) refers to interrupt.o(i.IntRegister) for IntRegister
    main.o(.text.SetupUart) refers to interrupt.o(i.IntEnable) for IntEnable
    main.o(.text.SetupUart) refers to uart.o(i.UARTIntEnable) for UARTIntEnable
    main.o(.text.SetupUart) refers to main.o(.bss.uartMsg) for uartMsg
    main.o(.ARM.exidx.text.SetupUart) refers to main.o(.text.SetupUart) for [Anonymous Symbol]
    main.o(.text.ChangeButtonStatus) refers to uart.o(.text.UART_OutChar) for UART_OutChar
    main.o(.ARM.exidx.text.ChangeButtonStatus) refers to main.o(.text.ChangeButtonStatus) for [Anonymous Symbol]
    main.o(.text.GetFloorIntFromFloorNumberChar) refers to main.o(.text.GetFloorCharFromFloorNumberString) for GetFloorCharFromFloorNumberString
    main.o(.ARM.exidx.text.GetFloorIntFromFloorNumberChar) refers to main.o(.text.GetFloorIntFromFloorNumberChar) for [Anonymous Symbol]
    main.o(.text.StopElevator) refers to uart.o(.text.UART_OutChar) for UART_OutChar
    main.o(.ARM.exidx.text.StopElevator) refers to main.o(.text.StopElevator) for [Anonymous Symbol]
    main.o(.text.ChangeDoorStatus) refers to uart.o(.text.UART_OutChar) for UART_OutChar
    main.o(.ARM.exidx.text.ChangeDoorStatus) refers to main.o(.text.ChangeDoorStatus) for [Anonymous Symbol]
    main.o(.ARM.exidx.text.GetFloorCharFromFloorNumberString) refers to main.o(.text.GetFloorCharFromFloorNumberString) for [Anonymous Symbol]
    main.o(.text.SetMovement) refers to main.o(.text.SetDirection) for SetDirection
    main.o(.text.SetMovement) refers to main.o(.text.MovElevator) for MovElevator
    main.o(.ARM.exidx.text.SetMovement) refers to main.o(.text.SetMovement) for [Anonymous Symbol]
    main.o(.text.InitElevators) refers to main.o(.text.InitElevator) for InitElevator
    main.o(.ARM.exidx.text.InitElevators) refers to main.o(.text.InitElevators) for [Anonymous Symbol]
    main.o(.text.InitElevator) refers to uart.o(.text.UART_OutChar) for UART_OutChar
    main.o(.ARM.exidx.text.InitElevator) refers to main.o(.text.InitElevator) for [Anonymous Symbol]
    main.o(.text.MovElevator) refers to uart.o(.text.UART_OutChar) for UART_OutChar
    main.o(.ARM.exidx.text.MovElevator) refers to main.o(.text.MovElevator) for [Anonymous Symbol]
    main.o(.ARM.exidx.text.SetDirection) refers to main.o(.text.SetDirection) for [Anonymous Symbol]
    main.o(.text.UARTIntHandler) refers to uart.o(i.UARTIntClear) for UARTIntClear
    main.o(.text.UARTIntHandler) refers to uart.o(.text.UART_InChar) for UART_InChar
    main.o(.text.UARTIntHandler) refers to main.o(.bss.uartMsg) for uartMsg
    main.o(.text.UARTIntHandler) refers to main.o(.bss.qidController) for qidController
    main.o(.text.UARTIntHandler) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for osMessageQueuePut
    main.o(.text.UARTIntHandler) refers to main.o(.rodata.str1.1) for .L.str
    main.o(.text.UARTIntHandler) refers to strcpy.o(.text) for strcpy
    main.o(.ARM.exidx.text.UARTIntHandler) refers to main.o(.text.UARTIntHandler) for [Anonymous Symbol]
    uart.o(.ARM.exidx.text.UART_Init) refers to uart.o(.text.UART_Init) for [Anonymous Symbol]
    uart.o(.ARM.exidx.text.UART_InChar) refers to uart.o(.text.UART_InChar) for [Anonymous Symbol]
    uart.o(.ARM.exidx.text.UART_OutChar) refers to uart.o(.text.UART_OutChar) for [Anonymous Symbol]
    uart.o(.text.fputc) refers to uart.o(.text.UART_OutChar) for UART_OutChar
    uart.o(.ARM.exidx.text.fputc) refers to uart.o(.text.fputc) for [Anonymous Symbol]
    uart.o(.text.fgetc) refers to uart.o(.text.UART_InChar) for UART_InChar
    uart.o(.ARM.exidx.text.fgetc) refers to uart.o(.text.fgetc) for [Anonymous Symbol]
    uart.o(.ARM.exidx.text.ferror) refers to uart.o(.text.ferror) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_idle_thread_attr) refers to rtx_lib.o(.bss.os.thread.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_idle_thread_attr) refers to rtx_lib.o(.bss.os.thread.idle.stack) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_thread_attr) refers to rtx_lib.o(.bss.os.thread.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_thread_attr) refers to rtx_lib.o(.bss.os.thread.timer.stack) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_mq_attr) refers to rtx_lib.o(.bss.os.msgqueue.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_mq_attr) refers to rtx_lib.o(.bss.os.msgqueue.mem) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.bss.os) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_idle_thread_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_timer_thread_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_timer.o(.text.osRtxTimerThread) for osRtxTimerThread
    rtx_lib.o(.rodata) refers to rtx_timer.o(.text.osRtxTimerSetup) for osRtxTimerSetup
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_timer_mq_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata.irqRtxLibRef) refers to irq_armv7m.o(.rodata) for irqRtxLib
    rtx_config.o(.ARM.exidx.text.osRtxIdleThread) refers to rtx_config.o(.text.osRtxIdleThread) for [Anonymous Symbol]
    rtx_config.o(.ARM.exidx.text.osRtxErrorNotify) refers to rtx_config.o(.text.osRtxErrorNotify) for [Anonymous Symbol]
    startup_tm4c129.o(RESET) refers to startup_tm4c129.o(STACK) for __initial_sp
    startup_tm4c129.o(RESET) refers to startup_tm4c129.o(.text) for Reset_Handler
    startup_tm4c129.o(RESET) refers to irq_armv7m.o(.text) for SVC_Handler
    startup_tm4c129.o(.text) refers to system_tm4c129.o(.text.SystemInit) for SystemInit
    startup_tm4c129.o(.text) refers to entry.o(.ARM.Collect$$$$00000000) for __main
    system_tm4c129.o(.text.SystemCoreClockUpdate) refers to system_tm4c129.o(.data.SystemCoreClock) for SystemCoreClock
    system_tm4c129.o(.ARM.exidx.text.SystemCoreClockUpdate) refers to system_tm4c129.o(.text.SystemCoreClockUpdate) for [Anonymous Symbol]
    system_tm4c129.o(.text.SystemInit) refers to system_tm4c129.o(.data.SystemCoreClock) for SystemCoreClock
    system_tm4c129.o(.ARM.exidx.text.SystemInit) refers to system_tm4c129.o(.text.SystemInit) for [Anonymous Symbol]
    interrupt.o(i.IntDisable) refers to interrupt.o(.constdata) for .constdata
    interrupt.o(i.IntEnable) refers to interrupt.o(.constdata) for .constdata
    interrupt.o(i.IntIsEnabled) refers to interrupt.o(.constdata) for .constdata
    interrupt.o(i.IntMasterDisable) refers to cpu.o(.emb_text) for CPUcpsid
    interrupt.o(i.IntMasterEnable) refers to cpu.o(.emb_text) for CPUcpsie
    interrupt.o(i.IntPendClear) refers to interrupt.o(.constdata) for .constdata
    interrupt.o(i.IntPendSet) refers to interrupt.o(.constdata) for .constdata
    interrupt.o(i.IntPriorityGet) refers to interrupt.o(.constdata) for .constdata
    interrupt.o(i.IntPriorityGroupingGet) refers to interrupt.o(.constdata) for .constdata
    interrupt.o(i.IntPriorityGroupingSet) refers to interrupt.o(.constdata) for .constdata
    interrupt.o(i.IntPriorityMaskGet) refers to cpu.o(.emb_text) for CPUbasepriGet
    interrupt.o(i.IntPriorityMaskSet) refers to cpu.o(.emb_text) for CPUbasepriSet
    interrupt.o(i.IntPrioritySet) refers to interrupt.o(.constdata) for .constdata
    interrupt.o(i.IntRegister) refers to interrupt.o(vtable) for vtable
    interrupt.o(i.IntUnregister) refers to interrupt.o(i._IntDefaultHandler) for _IntDefaultHandler
    interrupt.o(i.IntUnregister) refers to interrupt.o(vtable) for vtable
    uart.o(i.UARTIntRegister) refers to interrupt.o(i.IntRegister) for IntRegister
    uart.o(i.UARTIntRegister) refers to interrupt.o(i.IntEnable) for IntEnable
    uart.o(i.UARTIntRegister) refers to uart.o(.constdata) for .constdata
    uart.o(i.UARTIntUnregister) refers to interrupt.o(i.IntDisable) for IntDisable
    uart.o(i.UARTIntUnregister) refers to interrupt.o(i.IntUnregister) for IntUnregister
    uart.o(i.UARTIntUnregister) refers to uart.o(.constdata) for .constdata
    rtx_kernel.o(.ARM.exidx.text.osRtxKernelPreInit) refers to rtx_kernel.o(.text.osRtxKernelPreInit) for [Anonymous Symbol]
    rtx_kernel.o(.text.osRtxKernelErrorNotify) refers to rtx_config.o(.text.osRtxErrorNotify) for osRtxErrorNotify
    rtx_kernel.o(.ARM.exidx.text.osRtxKernelErrorNotify) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.osRtxKernelPreInit) for osRtxKernelPreInit
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.svcRtxKernelInitialize) for svcRtxKernelInitialize
    rtx_kernel.o(.ARM.exidx.text.osKernelInitialize) refers to rtx_kernel.o(.text.osKernelInitialize) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetInfo) refers to rtx_kernel.o(.text.svcRtxKernelGetInfo) for svcRtxKernelGetInfo
    rtx_kernel.o(.ARM.exidx.text.osKernelGetInfo) refers to rtx_kernel.o(.text.osKernelGetInfo) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to rtx_kernel.o(.rodata.str1.4) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetInfo) refers to rtx_kernel.o(.text.svcRtxKernelGetInfo) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.text.svcRtxKernelGetState) for svcRtxKernelGetState
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.osKernelGetState) refers to rtx_kernel.o(.text.osKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetState) refers to rtx_kernel.o(.text.svcRtxKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelStart) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_kernel.o(.text.osKernelStart) refers to rtx_kernel.o(.text.svcRtxKernelStart) for svcRtxKernelStart
    rtx_kernel.o(.ARM.exidx.text.osKernelStart) refers to rtx_kernel.o(.text.osKernelStart) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelLock) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_kernel.o(.text.osKernelLock) refers to rtx_kernel.o(.text.svcRtxKernelLock) for svcRtxKernelLock
    rtx_kernel.o(.ARM.exidx.text.osKernelLock) refers to rtx_kernel.o(.text.osKernelLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelUnlock) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_kernel.o(.text.osKernelUnlock) refers to rtx_kernel.o(.text.svcRtxKernelUnlock) for svcRtxKernelUnlock
    rtx_kernel.o(.ARM.exidx.text.osKernelUnlock) refers to rtx_kernel.o(.text.osKernelUnlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.svcRtxKernelRestoreLock) for svcRtxKernelRestoreLock
    rtx_kernel.o(.ARM.exidx.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.osKernelRestoreLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelSuspend) refers to rtx_kernel.o(.text.svcRtxKernelSuspend) for svcRtxKernelSuspend
    rtx_kernel.o(.ARM.exidx.text.osKernelSuspend) refers to rtx_kernel.o(.text.osKernelSuspend) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelResume) refers to rtx_kernel.o(.text.svcRtxKernelResume) for svcRtxKernelResume
    rtx_kernel.o(.ARM.exidx.text.osKernelResume) refers to rtx_kernel.o(.text.osKernelResume) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.svcRtxKernelGetTickCount) for svcRtxKernelGetTickCount
    rtx_kernel.o(.ARM.exidx.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.osKernelGetTickCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetTickCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickCount) refers to rtx_kernel.o(.text.svcRtxKernelGetTickCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetTickFreq) for svcRtxKernelGetTickFreq
    rtx_kernel.o(.ARM.exidx.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.osKernelGetTickFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetTickFreq) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetTickFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) for svcRtxKernelGetSysTimerCount
    rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.osKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetCount) for OS_Tick_GetCount
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetOverflow) for OS_Tick_GetOverflow
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetInterval) for OS_Tick_GetInterval
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerCount) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to os_systick.o(.text.OS_Tick_GetClock) for OS_Tick_GetClock
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) for svcRtxKernelGetSysTimerFreq
    rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.osKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) refers to os_systick.o(.text.OS_Tick_GetClock) for OS_Tick_GetClock
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_memory.o(.text.osRtxMemoryInit) for osRtxMemoryInit
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.text.svcRtxKernelInitialize) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadStartup) for osRtxThreadStartup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_Setup) for OS_Tick_Setup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_GetIRQn) for OS_Tick_GetIRQn
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_Enable) for OS_Tick_Enable
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.svcRtxKernelStart) refers to irq_armv7m.o(.text) for SysTick_Handler
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelStart) refers to rtx_kernel.o(.text.svcRtxKernelStart) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelLock) refers to rtx_kernel.o(.text.svcRtxKernelLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelUnlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelUnlock) refers to rtx_kernel.o(.text.svcRtxKernelUnlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.text.svcRtxKernelRestoreLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to os_systick.o(.text.OS_Tick_Disable) for OS_Tick_Disable
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.text.GetKernelSleepTime) for GetKernelSleepTime
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.text.svcRtxKernelSuspend) for [Anonymous Symbol]
    rtx_kernel.o(.text.GetKernelSleepTime) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.GetKernelSleepTime) refers to rtx_kernel.o(.text.GetKernelSleepTime) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_kernel.o(.text.GetKernelSleepTime) for GetKernelSleepTime
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for osRtxThreadDelayTick
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_kernel.o(.text.svcRtxKernelResume) refers to os_systick.o(.text.OS_Tick_Enable) for OS_Tick_Enable
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelResume) refers to rtx_kernel.o(.text.svcRtxKernelResume) for [Anonymous Symbol]
    rtx_kernel.o(.text.OUTLINED_FUNCTION_0) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_kernel.o(.ARM.exidx.text.OUTLINED_FUNCTION_0) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_0) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.OUTLINED_FUNCTION_1) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for [Anonymous Symbol]
    rtx_kernel.o(.data.os) refers to rtx_kernel.o(.rodata.str1.4) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListPut) refers to rtx_thread.o(.text.osRtxThreadListPut) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListGet) refers to rtx_thread.o(.text.osRtxThreadListGet) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListSort) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListRemove) refers to rtx_thread.o(.text.osRtxThreadListRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadReadyPut) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_thread.o(.text.osRtxThreadReadyPut) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadReadyPut) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_mutex.o(.text.osRtxMutexOwnerRestore) for osRtxMutexOwnerRestore
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadRegPtr) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadSwitch) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadSwitch) refers to rtx_thread.o(.text.osRtxThreadSwitch) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadBlock) for osRtxThreadBlock
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadDispatch) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadBlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadBlock) refers to rtx_thread.o(.text.osRtxThreadBlock) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayRemove) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayInsert) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_thread.o(.text.svcRtxThreadNew) for svcRtxThreadNew
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_config.o(.text.osRtxIdleThread) for osRtxIdleThread
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadStartup) refers to rtx_thread.o(.text.osRtxThreadStartup) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_thread.o(.text.svcRtxThreadNew) refers to memseta.o(.text) for __aeabi_memclr4
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osThreadExit) for osThreadExit
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadPostProcess) for osRtxThreadPostProcess
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadNew) refers to rtx_thread.o(.text.svcRtxThreadNew) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadNew) refers to rtx_thread.o(.text.svcRtxThreadNew) for svcRtxThreadNew
    rtx_thread.o(.ARM.exidx.text.osThreadNew) refers to rtx_thread.o(.text.osThreadNew) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetName) refers to rtx_thread.o(.text.svcRtxThreadGetName) for svcRtxThreadGetName
    rtx_thread.o(.ARM.exidx.text.osThreadGetName) refers to rtx_thread.o(.text.osThreadGetName) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetId) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osThreadGetId) refers to rtx_thread.o(.text.svcRtxThreadGetId) for svcRtxThreadGetId
    rtx_thread.o(.ARM.exidx.text.osThreadGetId) refers to rtx_thread.o(.text.osThreadGetId) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetId) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetId) refers to rtx_thread.o(.text.svcRtxThreadGetId) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetState) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for OUTLINED_FUNCTION_4
    rtx_thread.o(.text.osThreadGetState) refers to rtx_thread.o(.text.svcRtxThreadGetState) for svcRtxThreadGetState
    rtx_thread.o(.ARM.exidx.text.osThreadGetState) refers to rtx_thread.o(.text.osThreadGetState) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetStackSize) refers to rtx_thread.o(.text.svcRtxThreadGetStackSize) for svcRtxThreadGetStackSize
    rtx_thread.o(.ARM.exidx.text.osThreadGetStackSize) refers to rtx_thread.o(.text.osThreadGetStackSize) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.svcRtxThreadGetStackSpace) for svcRtxThreadGetStackSpace
    rtx_thread.o(.ARM.exidx.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.osThreadGetStackSpace) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSetPriority) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadSetPriority) refers to rtx_thread.o(.text.svcRtxThreadSetPriority) for svcRtxThreadSetPriority
    rtx_thread.o(.ARM.exidx.text.osThreadSetPriority) refers to rtx_thread.o(.text.osThreadSetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetPriority) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for OUTLINED_FUNCTION_4
    rtx_thread.o(.text.osThreadGetPriority) refers to rtx_thread.o(.text.svcRtxThreadGetPriority) for svcRtxThreadGetPriority
    rtx_thread.o(.ARM.exidx.text.osThreadGetPriority) refers to rtx_thread.o(.text.osThreadGetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadYield) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadYield) refers to rtx_thread.o(.text.svcRtxThreadYield) for svcRtxThreadYield
    rtx_thread.o(.ARM.exidx.text.osThreadYield) refers to rtx_thread.o(.text.osThreadYield) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSuspend) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadSuspend) refers to rtx_thread.o(.text.svcRtxThreadSuspend) for svcRtxThreadSuspend
    rtx_thread.o(.ARM.exidx.text.osThreadSuspend) refers to rtx_thread.o(.text.osThreadSuspend) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadResume) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadResume) refers to rtx_thread.o(.text.svcRtxThreadResume) for svcRtxThreadResume
    rtx_thread.o(.ARM.exidx.text.osThreadResume) refers to rtx_thread.o(.text.osThreadResume) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadDetach) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadDetach) refers to rtx_thread.o(.text.svcRtxThreadDetach) for svcRtxThreadDetach
    rtx_thread.o(.ARM.exidx.text.osThreadDetach) refers to rtx_thread.o(.text.osThreadDetach) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadJoin) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadJoin) refers to rtx_thread.o(.text.svcRtxThreadJoin) for svcRtxThreadJoin
    rtx_thread.o(.ARM.exidx.text.osThreadJoin) refers to rtx_thread.o(.text.osThreadJoin) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadExit) refers to rtx_thread.o(.text.svcRtxThreadExit) for svcRtxThreadExit
    rtx_thread.o(.ARM.exidx.text.osThreadExit) refers to rtx_thread.o(.text.osThreadExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadTerminate) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadTerminate) refers to rtx_thread.o(.text.svcRtxThreadTerminate) for svcRtxThreadTerminate
    rtx_thread.o(.ARM.exidx.text.osThreadTerminate) refers to rtx_thread.o(.text.osThreadTerminate) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetCount) refers to rtx_thread.o(.text.svcRtxThreadGetCount) for svcRtxThreadGetCount
    rtx_thread.o(.ARM.exidx.text.osThreadGetCount) refers to rtx_thread.o(.text.osThreadGetCount) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadEnumerate) refers to rtx_thread.o(.text.svcRtxThreadEnumerate) for svcRtxThreadEnumerate
    rtx_thread.o(.ARM.exidx.text.osThreadEnumerate) refers to rtx_thread.o(.text.osThreadEnumerate) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_thread.o(.text.svcRtxThreadFlagsSet) for svcRtxThreadFlagsSet
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsSet) refers to rtx_thread.o(.text.osThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsClear) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadFlagsClear) refers to rtx_thread.o(.text.svcRtxThreadFlagsClear) for svcRtxThreadFlagsClear
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsClear) refers to rtx_thread.o(.text.osThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsGet) refers to rtx_thread.o(.text.svcRtxThreadFlagsGet) for svcRtxThreadFlagsGet
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsGet) refers to rtx_thread.o(.text.osThreadFlagsGet) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsWait) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadFlagsWait) refers to rtx_thread.o(.text.svcRtxThreadFlagsWait) for svcRtxThreadFlagsWait
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsWait) refers to rtx_thread.o(.text.osThreadFlagsWait) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.osRtxThreadPostProcess) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.ThreadFlagsCheck) refers to rtx_thread.o(.text.ThreadFlagsCheck) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetName) refers to rtx_thread.o(.text.svcRtxThreadGetName) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetState) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for OUTLINED_FUNCTION_4
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetState) refers to rtx_thread.o(.text.svcRtxThreadGetState) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSize) refers to rtx_thread.o(.text.svcRtxThreadGetStackSize) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetStackSpace) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSpace) refers to rtx_thread.o(.text.svcRtxThreadGetStackSpace) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.svcRtxThreadSetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetPriority) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for OUTLINED_FUNCTION_4
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetPriority) refers to rtx_thread.o(.text.svcRtxThreadGetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadYield) refers to rtx_thread.o(.text.svcRtxThreadYield) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_2) for OUTLINED_FUNCTION_2
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.svcRtxThreadSuspend) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_2) for OUTLINED_FUNCTION_2
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadResume) refers to rtx_thread.o(.text.svcRtxThreadResume) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for osRtxThreadListUnlink
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.svcRtxThreadDetach) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListUnlink) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListUnlink) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadFree) refers to rtx_thread.o(.text.osRtxThreadFree) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for osRtxThreadListUnlink
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.svcRtxThreadJoin) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadJoinWakeup) for osRtxThreadJoinWakeup
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadDestroy) for osRtxThreadDestroy
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadExit) refers to rtx_thread.o(.text.svcRtxThreadExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadJoinWakeup) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.osRtxThreadJoinWakeup) refers to rtx_thread.o(.text.osRtxThreadJoinWakeup) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDestroy) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.osRtxThreadDestroy) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDestroy) refers to rtx_thread.o(.text.osRtxThreadDestroy) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_2) for OUTLINED_FUNCTION_2
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadJoinWakeup) for osRtxThreadJoinWakeup
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDestroy) for osRtxThreadDestroy
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.svcRtxThreadTerminate) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetCount) refers to rtx_thread.o(.text.svcRtxThreadGetCount) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadEnumerate) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadEnumerate) refers to rtx_thread.o(.text.svcRtxThreadEnumerate) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.svcRtxThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsClear) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.text.svcRtxThreadFlagsClear) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsClear) refers to rtx_thread.o(.text.svcRtxThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsGet) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsGet) refers to rtx_thread.o(.text.svcRtxThreadFlagsGet) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.svcRtxThreadFlagsWait) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_0) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_1) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for [Anonymous Symbol]
    rtx_thread.o(.text.OUTLINED_FUNCTION_2) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.OUTLINED_FUNCTION_2) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_2) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_2) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_3) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_4) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for [Anonymous Symbol]
    rtx_delay.o(.text.osDelay) refers to rtx_delay.o(.text.svcRtxDelay) for svcRtxDelay
    rtx_delay.o(.ARM.exidx.text.osDelay) refers to rtx_delay.o(.text.osDelay) for [Anonymous Symbol]
    rtx_delay.o(.text.osDelayUntil) refers to rtx_delay.o(.text.svcRtxDelayUntil) for svcRtxDelayUntil
    rtx_delay.o(.ARM.exidx.text.osDelayUntil) refers to rtx_delay.o(.text.osDelayUntil) for [Anonymous Symbol]
    rtx_delay.o(.text.svcRtxDelay) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_delay.o(.ARM.exidx.text.svcRtxDelay) refers to rtx_delay.o(.text.svcRtxDelay) for [Anonymous Symbol]
    rtx_delay.o(.text.svcRtxDelayUntil) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_delay.o(.text.svcRtxDelayUntil) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_delay.o(.ARM.exidx.text.svcRtxDelayUntil) refers to rtx_delay.o(.text.svcRtxDelayUntil) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerSetup) refers to rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) for osRtxMessageQueueTimerSetup
    rtx_timer.o(.text.osRtxTimerSetup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.text.osRtxTimerSetup) refers to rtx_timer.o(.text.osRtxTimerTick) for osRtxTimerTick
    rtx_timer.o(.ARM.exidx.text.osRtxTimerSetup) refers to rtx_timer.o(.text.osRtxTimerSetup) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for osMessageQueuePut
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_timer.o(.text.TimerInsert) for TimerInsert
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.osRtxTimerTick) refers to rtx_timer.o(.text.osRtxTimerTick) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for osMessageQueueGet
    rtx_timer.o(.ARM.exidx.text.osRtxTimerThread) refers to rtx_timer.o(.text.osRtxTimerThread) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerNew) refers to rtx_timer.o(.text.svcRtxTimerNew) for svcRtxTimerNew
    rtx_timer.o(.ARM.exidx.text.osTimerNew) refers to rtx_timer.o(.text.osTimerNew) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerGetName) refers to rtx_timer.o(.text.svcRtxTimerGetName) for svcRtxTimerGetName
    rtx_timer.o(.ARM.exidx.text.osTimerGetName) refers to rtx_timer.o(.text.osTimerGetName) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerStart) refers to rtx_timer.o(.text.svcRtxTimerStart) for svcRtxTimerStart
    rtx_timer.o(.ARM.exidx.text.osTimerStart) refers to rtx_timer.o(.text.osTimerStart) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerStop) refers to rtx_timer.o(.text.svcRtxTimerStop) for svcRtxTimerStop
    rtx_timer.o(.ARM.exidx.text.osTimerStop) refers to rtx_timer.o(.text.osTimerStop) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerIsRunning) refers to rtx_timer.o(.text.svcRtxTimerIsRunning) for svcRtxTimerIsRunning
    rtx_timer.o(.ARM.exidx.text.osTimerIsRunning) refers to rtx_timer.o(.text.osTimerIsRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerDelete) refers to rtx_timer.o(.text.svcRtxTimerDelete) for svcRtxTimerDelete
    rtx_timer.o(.ARM.exidx.text.osTimerDelete) refers to rtx_timer.o(.text.osTimerDelete) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerInsert) refers to rtx_timer.o(.text.TimerInsert) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerNew) refers to rtx_timer.o(.text.svcRtxTimerNew) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerGetName) refers to rtx_timer.o(.text.svcRtxTimerGetName) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.TimerInsert) for TimerInsert
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerStart) refers to rtx_timer.o(.text.svcRtxTimerStart) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerRemove) refers to rtx_timer.o(.text.TimerRemove) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerStop) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerStop) refers to rtx_timer.o(.text.svcRtxTimerStop) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerIsRunning) refers to rtx_timer.o(.text.svcRtxTimerIsRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.svcRtxTimerDelete) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for svcRtxMessageQueueNew
    rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueueTimerSetup) refers to rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to memseta.o(.text) for __aeabi_memclr
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) for osRtxMessageQueuePostProcess
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for svcRtxMessageQueueNew
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.osMessageQueueNew) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) for svcRtxMessageQueueGetName
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.osMessageQueueGetName) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.svcRtxMessageQueuePut) for svcRtxMessageQueuePut
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGet) for svcRtxMessageQueueGet
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) for svcRtxMessageQueueGetCapacity
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.osMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) for svcRtxMessageQueueGetMsgSize
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) for svcRtxMessageQueueGetCount
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.osMessageQueueGetCount) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCount) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) for svcRtxMessageQueueGetSpace
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.osMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueReset) for svcRtxMessageQueueReset
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.osMessageQueueReset) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) for svcRtxMessageQueueDelete
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.osMessageQueueDelete) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueueRemove) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueuePut) refers to rtx_msgqueue.o(.text.MessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetName) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.svcRtxMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueReset) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueDelete) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.ARM.exidx.text.OUTLINED_FUNCTION_0) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.ARM.exidx.text.OUTLINED_FUNCTION_1) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1) for [Anonymous Symbol]
    irq_armv7m.o(.text) refers to rtx_system.o(.text.osRtxPendSV_Handler) for osRtxPendSV_Handler
    irq_armv7m.o(.text) refers to rtx_system.o(.text.osRtxTick_Handler) for osRtxTick_Handler
    irq_armv7m.o(.text) refers to rtx_kernel.o(.data.os) for osRtxInfo
    irq_armv7m.o(.text) refers to rtx_lib.o(.rodata.osRtxUserSVC) for osRtxUserSVC
    irq_armv7m.o(.ARM.exidx) refers to irq_armv7m.o(.text) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRelease) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxMutexOwnerRestore) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRestore) refers to rtx_mutex.o(.text.osRtxMutexOwnerRestore) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexNew) refers to rtx_mutex.o(.text.svcRtxMutexNew) for svcRtxMutexNew
    rtx_mutex.o(.ARM.exidx.text.osMutexNew) refers to rtx_mutex.o(.text.osMutexNew) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexGetName) refers to rtx_mutex.o(.text.svcRtxMutexGetName) for svcRtxMutexGetName
    rtx_mutex.o(.ARM.exidx.text.osMutexGetName) refers to rtx_mutex.o(.text.osMutexGetName) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexAcquire) refers to rtx_mutex.o(.text.svcRtxMutexAcquire) for svcRtxMutexAcquire
    rtx_mutex.o(.ARM.exidx.text.osMutexAcquire) refers to rtx_mutex.o(.text.osMutexAcquire) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexRelease) refers to rtx_mutex.o(.text.svcRtxMutexRelease) for svcRtxMutexRelease
    rtx_mutex.o(.ARM.exidx.text.osMutexRelease) refers to rtx_mutex.o(.text.osMutexRelease) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexGetOwner) refers to rtx_mutex.o(.text.svcRtxMutexGetOwner) for svcRtxMutexGetOwner
    rtx_mutex.o(.ARM.exidx.text.osMutexGetOwner) refers to rtx_mutex.o(.text.osMutexGetOwner) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexDelete) refers to rtx_mutex.o(.text.svcRtxMutexDelete) for svcRtxMutexDelete
    rtx_mutex.o(.ARM.exidx.text.osMutexDelete) refers to rtx_mutex.o(.text.osMutexDelete) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_mutex.o(.text.svcRtxMutexNew) refers to memseta.o(.text) for __aeabi_memclr4
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexNew) refers to rtx_mutex.o(.text.svcRtxMutexNew) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetName) refers to rtx_mutex.o(.text.svcRtxMutexGetName) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexAcquire) refers to rtx_mutex.o(.text.svcRtxMutexAcquire) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexRelease) refers to rtx_mutex.o(.text.svcRtxMutexRelease) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetOwner) refers to rtx_mutex.o(.text.svcRtxMutexGetOwner) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexDelete) refers to rtx_mutex.o(.text.svcRtxMutexDelete) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryInit) refers to rtx_memory.o(.text.osRtxMemoryInit) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryAlloc) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryFree) refers to rtx_memory.o(.text.osRtxMemoryFree) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolInit) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.svcRtxMemoryPoolNew) for svcRtxMemoryPoolNew
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.osMemoryPoolNew) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetName) for svcRtxMemoryPoolGetName
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.osMemoryPoolGetName) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) for svcRtxMemoryPoolAlloc
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.osMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.svcRtxMemoryPoolFree) for svcRtxMemoryPoolFree
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.osMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) for svcRtxMemoryPoolGetCapacity
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.osMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) for svcRtxMemoryPoolGetBlockSize
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.osMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) for svcRtxMemoryPoolGetCount
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.osMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCount) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) for svcRtxMemoryPoolGetSpace
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.osMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetSpace) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.svcRtxMemoryPoolDelete) for svcRtxMemoryPoolDelete
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.osMemoryPoolDelete) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to memseta.o(.text) for __aeabi_memclr
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) for osRtxMemoryPoolPostProcess
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.svcRtxMemoryPoolNew) for [Anonymous Symbol]
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolPostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetName) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetName) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.svcRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.svcRtxMemoryPoolDelete) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxTick_Handler) refers to os_systick.o(.text.OS_Tick_AcknowledgeIRQ) for OS_Tick_AcknowledgeIRQ
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for osRtxThreadDelayTick
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxTick_Handler) refers to rtx_system.o(.text.osRtxTick_Handler) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxPendSV_Handler) refers to rtx_system.o(.text.osRtxPendSV_Handler) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxPostProcess) refers to rtx_system.o(.text.osRtxPostProcess) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Setup) refers to system_tm4c129.o(.data.SystemCoreClock) for SystemCoreClock
    os_systick.o(.text.OS_Tick_Setup) refers to os_systick.o(.bss.os) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Setup) refers to os_systick.o(.text.OS_Tick_Setup) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Enable) refers to os_systick.o(.bss.os) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Enable) refers to os_systick.o(.text.OS_Tick_Enable) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Disable) refers to os_systick.o(.bss.os) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Disable) refers to os_systick.o(.text.OS_Tick_Disable) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_AcknowledgeIRQ) refers to os_systick.o(.text.OS_Tick_AcknowledgeIRQ) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetIRQn) refers to os_systick.o(.text.OS_Tick_GetIRQn) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_GetClock) refers to system_tm4c129.o(.data.SystemCoreClock) for SystemCoreClock
    os_systick.o(.ARM.exidx.text.OS_Tick_GetClock) refers to os_systick.o(.text.OS_Tick_GetClock) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetInterval) refers to os_systick.o(.text.OS_Tick_GetInterval) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetCount) refers to os_systick.o(.text.OS_Tick_GetCount) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetOverflow) refers to os_systick.o(.text.OS_Tick_GetOverflow) for [Anonymous Symbol]
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry10a.o(.ARM.Collect$$$$0000000D) for __rt_final_cpp
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry11a.o(.ARM.Collect$$$$0000000F) for __rt_final_exit
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry7b.o(.ARM.Collect$$$$00000008) for _main_clock
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry8b.o(.ARM.Collect$$$$0000000A) for _main_cpp_init
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry9a.o(.ARM.Collect$$$$0000000B) for _main_init
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry5.o(.ARM.Collect$$$$00000004) for _main_scatterload
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry2.o(.ARM.Collect$$$$00000001) for _main_stk
    entry2.o(.ARM.Collect$$$$00000001) refers to entry2.o(.ARM.Collect$$$$00002712) for __lit__00000000
    entry2.o(.ARM.Collect$$$$00002712) refers to startup_tm4c129.o(STACK) for __initial_sp
    entry2.o(__vectab_stack_and_reset_area) refers to startup_tm4c129.o(STACK) for __initial_sp
    entry2.o(__vectab_stack_and_reset_area) refers to entry.o(.ARM.Collect$$$$00000000) for __main
    entry5.o(.ARM.Collect$$$$00000004) refers to init.o(.text) for __scatterload
    entry9a.o(.ARM.Collect$$$$0000000B) refers to main.o(.text.main) for main
    entry9b.o(.ARM.Collect$$$$0000000C) refers to main.o(.text.main) for main
    init.o(.text) refers to entry5.o(.ARM.Collect$$$$00000004) for __main_after_scatterload


==============================================================================

Removing Unused input sections from the image.

    Removing main.o(.text), (0 bytes).
    Removing main.o(.ARM.exidx.text.main), (8 bytes).
    Removing main.o(.ARM.exidx.text.ThreadCentral), (8 bytes).
    Removing main.o(.ARM.exidx.text.ThreadLeft), (8 bytes).
    Removing main.o(.ARM.exidx.text.ThreadRight), (8 bytes).
    Removing main.o(.ARM.exidx.text.ThreadController), (8 bytes).
    Removing main.o(.ARM.exidx.text.SetupUart), (8 bytes).
    Removing main.o(.ARM.exidx.text.ChangeButtonStatus), (8 bytes).
    Removing main.o(.ARM.exidx.text.GetFloorIntFromFloorNumberChar), (8 bytes).
    Removing main.o(.ARM.exidx.text.StopElevator), (8 bytes).
    Removing main.o(.ARM.exidx.text.ChangeDoorStatus), (8 bytes).
    Removing main.o(.ARM.exidx.text.GetFloorCharFromFloorNumberString), (8 bytes).
    Removing main.o(.ARM.exidx.text.SetMovement), (8 bytes).
    Removing main.o(.ARM.exidx.text.InitElevators), (8 bytes).
    Removing main.o(.ARM.exidx.text.InitElevator), (8 bytes).
    Removing main.o(.ARM.exidx.text.MovElevator), (8 bytes).
    Removing main.o(.ARM.exidx.text.SetDirection), (8 bytes).
    Removing main.o(.ARM.exidx.text.UARTIntHandler), (8 bytes).
    Removing main.o(.ARM.use_no_argv), (4 bytes).
    Removing uart.o(.text), (0 bytes).
    Removing uart.o(.ARM.exidx.text.UART_Init), (8 bytes).
    Removing uart.o(.ARM.exidx.text.UART_InChar), (8 bytes).
    Removing uart.o(.ARM.exidx.text.UART_OutChar), (8 bytes).
    Removing uart.o(.text.fputc), (70 bytes).
    Removing uart.o(.ARM.exidx.text.fputc), (8 bytes).
    Removing uart.o(.text.fgetc), (14 bytes).
    Removing uart.o(.ARM.exidx.text.fgetc), (8 bytes).
    Removing uart.o(.text.ferror), (12 bytes).
    Removing uart.o(.ARM.exidx.text.ferror), (8 bytes).
    Removing rtx_lib.o(.text), (0 bytes).
    Removing rtx_lib.o(.rodata.irqRtxLibRef), (4 bytes).
    Removing rtx_config.o(.text), (0 bytes).
    Removing rtx_config.o(.ARM.exidx.text.osRtxIdleThread), (8 bytes).
    Removing rtx_config.o(.ARM.exidx.text.osRtxErrorNotify), (8 bytes).
    Removing startup_tm4c129.o(HEAP), (0 bytes).
    Removing system_tm4c129.o(.text), (0 bytes).
    Removing system_tm4c129.o(.text.SystemCoreClockUpdate), (20 bytes).
    Removing system_tm4c129.o(.ARM.exidx.text.SystemCoreClockUpdate), (8 bytes).
    Removing system_tm4c129.o(.ARM.exidx.text.SystemInit), (8 bytes).
    Removing interrupt.o(i.IntDisable), (100 bytes).
    Removing interrupt.o(i.IntIsEnabled), (96 bytes).
    Removing interrupt.o(i.IntMasterDisable), (14 bytes).
    Removing interrupt.o(i.IntPendClear), (68 bytes).
    Removing interrupt.o(i.IntPendSet), (84 bytes).
    Removing interrupt.o(i.IntPriorityGet), (28 bytes).
    Removing interrupt.o(i.IntPriorityGroupingGet), (36 bytes).
    Removing interrupt.o(i.IntPriorityGroupingSet), (28 bytes).
    Removing interrupt.o(i.IntPriorityMaskGet), (4 bytes).
    Removing interrupt.o(i.IntPriorityMaskSet), (4 bytes).
    Removing interrupt.o(i.IntPrioritySet), (40 bytes).
    Removing interrupt.o(i.IntTrigger), (12 bytes).
    Removing interrupt.o(i.IntUnregister), (20 bytes).
    Removing interrupt.o(i._IntDefaultHandler), (2 bytes).
    Removing uart.o(i.UART9BitAddrSend), (38 bytes).
    Removing uart.o(i.UART9BitAddrSet), (10 bytes).
    Removing uart.o(i.UART9BitDisable), (14 bytes).
    Removing uart.o(i.UART9BitEnable), (14 bytes).
    Removing uart.o(i.UARTBreakCtl), (18 bytes).
    Removing uart.o(i.UARTBusy), (8 bytes).
    Removing uart.o(i.UARTCharGet), (12 bytes).
    Removing uart.o(i.UARTCharGetNonBlocking), (16 bytes).
    Removing uart.o(i.UARTCharPut), (12 bytes).
    Removing uart.o(i.UARTCharPutNonBlocking), (16 bytes).
    Removing uart.o(i.UARTCharsAvail), (10 bytes).
    Removing uart.o(i.UARTClockSourceGet), (6 bytes).
    Removing uart.o(i.UARTClockSourceSet), (6 bytes).
    Removing uart.o(i.UARTConfigGetExpClk), (46 bytes).
    Removing uart.o(i.UARTConfigSetExpClk), (110 bytes).
    Removing uart.o(i.UARTDMADisable), (10 bytes).
    Removing uart.o(i.UARTDMAEnable), (8 bytes).
    Removing uart.o(i.UARTDisable), (30 bytes).
    Removing uart.o(i.UARTDisableSIR), (10 bytes).
    Removing uart.o(i.UARTEnable), (20 bytes).
    Removing uart.o(i.UARTEnableSIR), (18 bytes).
    Removing uart.o(i.UARTFIFODisable), (10 bytes).
    Removing uart.o(i.UARTFIFOEnable), (10 bytes).
    Removing uart.o(i.UARTFIFOLevelGet), (16 bytes).
    Removing uart.o(i.UARTFIFOLevelSet), (6 bytes).
    Removing uart.o(i.UARTFlowControlGet), (8 bytes).
    Removing uart.o(i.UARTFlowControlSet), (12 bytes).
    Removing uart.o(i.UARTIntDisable), (10 bytes).
    Removing uart.o(i.UARTIntRegister), (88 bytes).
    Removing uart.o(i.UARTIntStatus), (10 bytes).
    Removing uart.o(i.UARTIntUnregister), (88 bytes).
    Removing uart.o(i.UARTLoopbackEnable), (10 bytes).
    Removing uart.o(i.UARTModemControlClear), (14 bytes).
    Removing uart.o(i.UARTModemControlGet), (8 bytes).
    Removing uart.o(i.UARTModemControlSet), (12 bytes).
    Removing uart.o(i.UARTModemStatusGet), (10 bytes).
    Removing uart.o(i.UARTParityModeGet), (8 bytes).
    Removing uart.o(i.UARTParityModeSet), (12 bytes).
    Removing uart.o(i.UARTRxErrorClear), (6 bytes).
    Removing uart.o(i.UARTRxErrorGet), (8 bytes).
    Removing uart.o(i.UARTSmartCardDisable), (10 bytes).
    Removing uart.o(i.UARTSmartCardEnable), (22 bytes).
    Removing uart.o(i.UARTSpaceAvail), (10 bytes).
    Removing uart.o(i.UARTTxIntModeGet), (8 bytes).
    Removing uart.o(i.UARTTxIntModeSet), (12 bytes).
    Removing uart.o(.constdata), (128 bytes).
    Removing rtx_kernel.o(.text), (0 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxKernelPreInit), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxKernelErrorNotify), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelInitialize), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetInfo), (48 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetInfo), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetInfo), (48 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetInfo), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelStart), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelLock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelLock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelUnlock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelUnlock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelRestoreLock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelRestoreLock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelSuspend), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelSuspend), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelResume), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelResume), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetTickCount), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetTickCount), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetTickCount), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickCount), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetTickFreq), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetTickFreq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetTickFreq), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickFreq), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetSysTimerCount), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerCount), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerCount), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetSysTimerFreq), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq), (4 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelInitialize), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelStart), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelLock), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelLock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelUnlock), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelUnlock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelRestoreLock), (44 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelRestoreLock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelSuspend), (64 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelSuspend), (8 bytes).
    Removing rtx_kernel.o(.text.GetKernelSleepTime), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.GetKernelSleepTime), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelResume), (124 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelResume), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.OUTLINED_FUNCTION_0), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.OUTLINED_FUNCTION_1), (8 bytes).
    Removing rtx_thread.o(.text), (0 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListPut), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListGet), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListSort), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadReadyPut), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayTick), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadRegPtr), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadSwitch), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDispatch), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadBlock), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitExit), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitEnter), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayInsert), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadStartup), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadNew), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadNew), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetName), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetName), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetId), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetId), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetId), (12 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetId), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetState), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetState), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetStackSize), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetStackSize), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetStackSpace), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetStackSpace), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSetPriority), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetPriority), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetPriority), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadYield), (8 bytes).
    Removing rtx_thread.o(.text.osThreadSuspend), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSuspend), (8 bytes).
    Removing rtx_thread.o(.text.osThreadResume), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadResume), (8 bytes).
    Removing rtx_thread.o(.text.osThreadDetach), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadDetach), (8 bytes).
    Removing rtx_thread.o(.text.osThreadJoin), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadJoin), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadExit), (8 bytes).
    Removing rtx_thread.o(.text.osThreadTerminate), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadTerminate), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetCount), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetCount), (8 bytes).
    Removing rtx_thread.o(.text.osThreadEnumerate), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadEnumerate), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsSet), (88 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsClear), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsGet), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsGet), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsWait), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsWait), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadPostProcess), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.ThreadFlagsCheck), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetName), (16 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetName), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetState), (20 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetState), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetStackSize), (16 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSize), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetStackSpace), (60 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSpace), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSetPriority), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetPriority), (24 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetPriority), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadYield), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadSuspend), (116 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspend), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadResume), (44 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadResume), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadDetach), (56 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadDetach), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadListUnlink), (32 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListUnlink), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadFree), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadJoin), (84 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadJoin), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadExit), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadJoinWakeup), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDestroy), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadTerminate), (136 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminate), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetCount), (52 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetCount), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadEnumerate), (92 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadEnumerate), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsSet), (102 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsClear), (52 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsGet), (20 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsGet), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsWait), (76 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsWait), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_0), (8 bytes).
    Removing rtx_thread.o(.text.OUTLINED_FUNCTION_1), (6 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_1), (8 bytes).
    Removing rtx_thread.o(.text.OUTLINED_FUNCTION_2), (20 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_2), (8 bytes).
    Removing rtx_thread.o(.text.OUTLINED_FUNCTION_3), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_3), (8 bytes).
    Removing rtx_thread.o(.text.OUTLINED_FUNCTION_4), (6 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_4), (8 bytes).
    Removing rtx_delay.o(.text), (0 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.osDelay), (8 bytes).
    Removing rtx_delay.o(.text.osDelayUntil), (36 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.osDelayUntil), (8 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.svcRtxDelay), (8 bytes).
    Removing rtx_delay.o(.text.svcRtxDelayUntil), (36 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.svcRtxDelayUntil), (8 bytes).
    Removing rtx_timer.o(.text), (0 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerSetup), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerTick), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerThread), (8 bytes).
    Removing rtx_timer.o(.text.osTimerNew), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerNew), (8 bytes).
    Removing rtx_timer.o(.text.osTimerGetName), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerGetName), (8 bytes).
    Removing rtx_timer.o(.text.osTimerStart), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerStart), (8 bytes).
    Removing rtx_timer.o(.text.osTimerStop), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerStop), (8 bytes).
    Removing rtx_timer.o(.text.osTimerIsRunning), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerIsRunning), (8 bytes).
    Removing rtx_timer.o(.text.osTimerDelete), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerDelete), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerInsert), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerNew), (120 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerNew), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerGetName), (16 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerGetName), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerStart), (72 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerStart), (8 bytes).
    Removing rtx_timer.o(.text.TimerRemove), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerRemove), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerStop), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerStop), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerIsRunning), (24 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerIsRunning), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerDelete), (76 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerDelete), (8 bytes).
    Removing rtx_msgqueue.o(.text), (0 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueueTimerSetup), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueNew), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueNew), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetName), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetName), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetCapacity), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCapacity), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity), (16 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCapacity), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetMsgSize), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize), (16 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetCount), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCount), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount), (16 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCount), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetSpace), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetSpace), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace), (20 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetSpace), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueReset), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueReset), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueDelete), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueDelete), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueuePostProcess), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueueRemove), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetName), (16 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetName), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueReset), (166 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueReset), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueDelete), (108 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueDelete), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.OUTLINED_FUNCTION_0), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.OUTLINED_FUNCTION_1), (8 bytes).
    Removing irq_armv7m.o(.rodata), (1 bytes).
    Removing irq_armv7m.o(.ARM.exidx), (24 bytes).
    Removing rtx_mutex.o(.text), (0 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRelease), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRestore), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexNew), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexNew), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexGetName), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexGetName), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexAcquire), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexAcquire), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexRelease), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexRelease), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexGetOwner), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexGetOwner), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexDelete), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexDelete), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexNew), (104 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexNew), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexGetName), (16 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetName), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexAcquire), (144 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexAcquire), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexRelease), (180 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexRelease), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexGetOwner), (20 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetOwner), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexDelete), (176 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexDelete), (8 bytes).
    Removing rtx_memory.o(.text), (0 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryInit), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryAlloc), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryFree), (8 bytes).
    Removing rtx_mempool.o(.text), (0 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolInit), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolNew), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolNew), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetName), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetName), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolAlloc), (104 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolFree), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetCapacity), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity), (16 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetBlockSize), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize), (16 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetCount), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCount), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetCount), (16 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCount), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetSpace), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetSpace), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace), (20 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetSpace), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolDelete), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolDelete), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolNew), (312 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolNew), (8 bytes).
    Removing rtx_mempool.o(.text.osRtxMemoryPoolPostProcess), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolPostProcess), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetName), (16 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetName), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolAlloc), (92 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolFree), (100 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolDelete), (108 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolDelete), (8 bytes).
    Removing rtx_system.o(.text), (0 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxTick_Handler), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxPendSV_Handler), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxPostProcess), (8 bytes).
    Removing os_systick.o(.text), (0 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Setup), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Enable), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_Disable), (44 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Disable), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_AcknowledgeIRQ), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetIRQn), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetClock), (12 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetClock), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetInterval), (12 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetInterval), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetCount), (16 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetCount), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetOverflow), (16 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetOverflow), (8 bytes).

434 unused section(s) (total 9505 bytes) removed from the image.

==============================================================================

Image Symbol Table

    Local Symbols

    Symbol Name                              Value     Ov Type        Size  Object(Section)

    ../clib/../cmprslib/zerorunl.c           0x00000000   Number         0  __dczerorl.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry2.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry5.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry7a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry7b.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry8a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry8b.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry9a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry9b.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry10a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry10b.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry11a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry11b.o ABSOLUTE
    ../clib/microlib/stdlib/abs.c            0x00000000   Number         0  siabs.o ABSOLUTE
    ../clib/microlib/stdlib/abs.c            0x00000000   Number         0  ilabs.o ABSOLUTE
    ../clib/microlib/string/memcpy.c         0x00000000   Number         0  memcpya.o ABSOLUTE
    ../clib/microlib/string/memcpy.c         0x00000000   Number         0  memcpyb.o ABSOLUTE
    ../clib/microlib/string/memset.c         0x00000000   Number         0  memseta.o ABSOLUTE
    ../clib/microlib/string/strcpy.c         0x00000000   Number         0  strcpy.o ABSOLUTE
    RTE/Device/TM4C1294NCPDT/startup_TM4C129.s 0x00000000   Number         0  startup_tm4c129.o ABSOLUTE
    RTX_Config.c                             0x00000000   Number         0  rtx_config.o ABSOLUTE
    UART.c                                   0x00000000   Number         0  uart.o ABSOLUTE
    cpu.c                                    0x00000000   Number         0  cpu.o ABSOLUTE
    cpu.c                                    0x00000000   Number         0  cpu.o ABSOLUTE
    dc.s                                     0x00000000   Number         0  dc.o ABSOLUTE
    handlers.s                               0x00000000   Number         0  handlers.o ABSOLUTE
    init.s                                   0x00000000   Number         0  init.o ABSOLUTE
    interrupt.c                              0x00000000   Number         0  interrupt.o ABSOLUTE
    main.c                                   0x00000000   Number         0  main.o ABSOLUTE
    os_systick.c                             0x00000000   Number         0  os_systick.o ABSOLUTE
    rtx_delay.c                              0x00000000   Number         0  rtx_delay.o ABSOLUTE
    rtx_kernel.c                             0x00000000   Number         0  rtx_kernel.o ABSOLUTE
    rtx_lib.c                                0x00000000   Number         0  rtx_lib.o ABSOLUTE
    rtx_memory.c                             0x00000000   Number         0  rtx_memory.o ABSOLUTE
    rtx_mempool.c                            0x00000000   Number         0  rtx_mempool.o ABSOLUTE
    rtx_msgqueue.c                           0x00000000   Number         0  rtx_msgqueue.o ABSOLUTE
    rtx_mutex.c                              0x00000000   Number         0  rtx_mutex.o ABSOLUTE
    rtx_system.c                             0x00000000   Number         0  rtx_system.o ABSOLUTE
    rtx_thread.c                             0x00000000   Number         0  rtx_thread.o ABSOLUTE
    rtx_timer.c                              0x00000000   Number         0  rtx_timer.o ABSOLUTE
    system_TM4C129.c                         0x00000000   Number         0  system_tm4c129.o ABSOLUTE
    uart.c                                   0x00000000   Number         0  uart.o ABSOLUTE
    RESET                                    0x00000000   Section      512  startup_tm4c129.o(RESET)
    FPU_USED                                 0x00000001   Number         0  irq_armv7m.o ABSOLUTE
    osRtxErrorStackOverflow                  0x00000001   Number         0  irq_armv7m.o ABSOLUTE
    I_T_RUN_OFS                              0x00000014   Number         0  irq_armv7m.o ABSOLUTE
    TCB_SF_OFS                               0x00000022   Number         0  irq_armv7m.o ABSOLUTE
    TCB_SP_OFS                               0x00000038   Number         0  irq_armv7m.o ABSOLUTE
    .ARM.Collect$$$$00000000                 0x00000200   Section        0  entry.o(.ARM.Collect$$$$00000000)
    .ARM.Collect$$$$00000001                 0x00000200   Section        4  entry2.o(.ARM.Collect$$$$00000001)
    .ARM.Collect$$$$00000004                 0x00000204   Section        4  entry5.o(.ARM.Collect$$$$00000004)
    .ARM.Collect$$$$00000008                 0x00000208   Section        0  entry7b.o(.ARM.Collect$$$$00000008)
    .ARM.Collect$$$$0000000A                 0x00000208   Section        0  entry8b.o(.ARM.Collect$$$$0000000A)
    .ARM.Collect$$$$0000000B                 0x00000208   Section        8  entry9a.o(.ARM.Collect$$$$0000000B)
    __lit__00000000                          0x00000210   Data           4  entry2.o(.ARM.Collect$$$$00002712)
    .ARM.Collect$$$$0000000D                 0x00000210   Section        0  entry10a.o(.ARM.Collect$$$$0000000D)
    .ARM.Collect$$$$0000000F                 0x00000210   Section        0  entry11a.o(.ARM.Collect$$$$0000000F)
    .ARM.Collect$$$$00002712                 0x00000210   Section        4  entry2.o(.ARM.Collect$$$$00002712)
    $v0                                      0x00000214   Number         0  cpu.o(.emb_text)
    .emb_text                                0x00000214   Section       38  cpu.o(.emb_text)
    $v0                                      0x0000023c   Number         0  startup_tm4c129.o(.text)
    .text                                    0x0000023c   Section      276  startup_tm4c129.o(.text)
    [Anonymous Symbol]                       0x00000350   Section        0  irq_armv7m.o(.text)
    SVC_Context                              0x00000378   Number         0  irq_armv7m.o(.text)
    SVC_FP_LazyState                         0x00000388   Number         0  irq_armv7m.o(.text)
    SVC_ContextSave                          0x0000039a   Number         0  irq_armv7m.o(.text)
    SVC_ContextRestore                       0x000003b0   Number         0  irq_armv7m.o(.text)
    SVC_Exit                                 0x000003cc   Number         0  irq_armv7m.o(.text)
    SVC_User                                 0x000003ce   Number         0  irq_armv7m.o(.text)
    .text                                    0x00000418   Section        0  siabs.o(.text)
    .text                                    0x00000420   Section        0  memcpya.o(.text)
    .text                                    0x00000444   Section        0  memseta.o(.text)
    .text                                    0x00000468   Section        0  strcpy.o(.text)
    .text                                    0x0000047c   Section       36  init.o(.text)
    .text                                    0x000004a0   Section        0  __dczerorl.o(.text)
    [Anonymous Symbol]                       0x000004dc   Section        0  main.o(.text.ChangeButtonStatus)
    [Anonymous Symbol]                       0x00000510   Section        0  main.o(.text.ChangeDoorStatus)
    [Anonymous Symbol]                       0x00000538   Section        0  main.o(.text.GetFloorCharFromFloorNumberString)
    [Anonymous Symbol]                       0x00000694   Section        0  main.o(.text.GetFloorIntFromFloorNumberChar)
    [Anonymous Symbol]                       0x000007f0   Section        0  main.o(.text.InitElevator)
    [Anonymous Symbol]                       0x00000810   Section        0  main.o(.text.InitElevators)
    MessageQueueGet                          0x00000827   Thumb Code    64  rtx_msgqueue.o(.text.MessageQueueGet)
    [Anonymous Symbol]                       0x00000826   Section        0  rtx_msgqueue.o(.text.MessageQueueGet)
    MessageQueuePut                          0x00000867   Thumb Code    88  rtx_msgqueue.o(.text.MessageQueuePut)
    [Anonymous Symbol]                       0x00000866   Section        0  rtx_msgqueue.o(.text.MessageQueuePut)
    MessageQueueRemove                       0x000008bf   Thumb Code    28  rtx_msgqueue.o(.text.MessageQueueRemove)
    [Anonymous Symbol]                       0x000008be   Section        0  rtx_msgqueue.o(.text.MessageQueueRemove)
    [Anonymous Symbol]                       0x000008dc   Section        0  main.o(.text.MovElevator)
    [Anonymous Symbol]                       0x00000904   Section        0  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    [Anonymous Symbol]                       0x0000090c   Section        0  os_systick.o(.text.OS_Tick_Enable)
    __arm_cp.1_1                             0x0000092c   Number         4  os_systick.o(.text.OS_Tick_Enable)
    [Anonymous Symbol]                       0x00000930   Section        0  os_systick.o(.text.OS_Tick_GetIRQn)
    [Anonymous Symbol]                       0x00000938   Section        0  os_systick.o(.text.OS_Tick_Setup)
    __arm_cp.0_0                             0x00000968   Number         4  os_systick.o(.text.OS_Tick_Setup)
    __arm_cp.0_1                             0x0000096c   Number         4  os_systick.o(.text.OS_Tick_Setup)
    __arm_cp.0_2                             0x00000970   Number         4  os_systick.o(.text.OS_Tick_Setup)
    __arm_cp.0_3                             0x00000974   Number         4  os_systick.o(.text.OS_Tick_Setup)
    OUTLINED_FUNCTION_0                      0x00000979   Thumb Code    12  rtx_kernel.o(.text.OUTLINED_FUNCTION_0)
    [Anonymous Symbol]                       0x00000978   Section        0  rtx_kernel.o(.text.OUTLINED_FUNCTION_0)
    OUTLINED_FUNCTION_0                      0x00000985   Thumb Code     6  rtx_thread.o(.text.OUTLINED_FUNCTION_0)
    [Anonymous Symbol]                       0x00000984   Section        0  rtx_thread.o(.text.OUTLINED_FUNCTION_0)
    OUTLINED_FUNCTION_0                      0x0000098b   Thumb Code    12  rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0)
    [Anonymous Symbol]                       0x0000098a   Section        0  rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0)
    OUTLINED_FUNCTION_1                      0x00000997   Thumb Code     6  rtx_kernel.o(.text.OUTLINED_FUNCTION_1)
    [Anonymous Symbol]                       0x00000996   Section        0  rtx_kernel.o(.text.OUTLINED_FUNCTION_1)
    OUTLINED_FUNCTION_1                      0x0000099d   Thumb Code     6  rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1)
    [Anonymous Symbol]                       0x0000099c   Section        0  rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1)
    [Anonymous Symbol]                       0x000009a4   Section        0  main.o(.text.SetDirection)
    [Anonymous Symbol]                       0x000009ec   Section        0  main.o(.text.SetMovement)
    [Anonymous Symbol]                       0x00000a1c   Section        0  main.o(.text.SetupUart)
    [Anonymous Symbol]                       0x00000a58   Section        0  main.o(.text.StopElevator)
    [Anonymous Symbol]                       0x00000a78   Section        0  system_tm4c129.o(.text.SystemInit)
    [Anonymous Symbol]                       0x00000a9c   Section        0  main.o(.text.ThreadCentral)
    [Anonymous Symbol]                       0x00000ca0   Section        0  main.o(.text.ThreadController)
    ThreadFlagsCheck                         0x00000eb7   Thumb Code   100  rtx_thread.o(.text.ThreadFlagsCheck)
    [Anonymous Symbol]                       0x00000eb6   Section        0  rtx_thread.o(.text.ThreadFlagsCheck)
    [Anonymous Symbol]                       0x00000f1c   Section        0  main.o(.text.ThreadLeft)
    [Anonymous Symbol]                       0x00001120   Section        0  main.o(.text.ThreadRight)
    TimerInsert                              0x00001325   Thumb Code    68  rtx_timer.o(.text.TimerInsert)
    [Anonymous Symbol]                       0x00001324   Section        0  rtx_timer.o(.text.TimerInsert)
    __arm_cp.9_0                             0x00001368   Number         4  rtx_timer.o(.text.TimerInsert)
    [Anonymous Symbol]                       0x0000136c   Section        0  main.o(.text.UARTIntHandler)
    [Anonymous Symbol]                       0x000013ec   Section        0  uart.o(.text.UART_InChar)
    [Anonymous Symbol]                       0x00001410   Section        0  uart.o(.text.UART_Init)
    [Anonymous Symbol]                       0x00001504   Section        0  uart.o(.text.UART_OutChar)
    [Anonymous Symbol]                       0x00001534   Section        0  main.o(.text.main)
    [Anonymous Symbol]                       0x000016dc   Section        0  rtx_delay.o(.text.osDelay)
    __arm_cp.0_0                             0x000016fc   Number         4  rtx_delay.o(.text.osDelay)
    [Anonymous Symbol]                       0x00001700   Section        0  rtx_kernel.o(.text.osKernelGetState)
    __arm_cp.5_0                             0x00001728   Number         4  rtx_kernel.o(.text.osKernelGetState)
    __arm_cp.5_1                             0x0000172c   Number         4  rtx_kernel.o(.text.osKernelGetState)
    [Anonymous Symbol]                       0x00001730   Section        0  rtx_kernel.o(.text.osKernelInitialize)
    __arm_cp.2_0                             0x00001758   Number         4  rtx_kernel.o(.text.osKernelInitialize)
    [Anonymous Symbol]                       0x0000175c   Section        0  rtx_kernel.o(.text.osKernelStart)
    __arm_cp.7_0                             0x0000177c   Number         4  rtx_kernel.o(.text.osKernelStart)
    [Anonymous Symbol]                       0x00001780   Section        0  rtx_msgqueue.o(.text.osMessageQueueGet)
    __arm_cp.5_0                             0x000017ec   Number         4  rtx_msgqueue.o(.text.osMessageQueueGet)
    [Anonymous Symbol]                       0x000017f0   Section        0  rtx_msgqueue.o(.text.osMessageQueueNew)
    __arm_cp.2_0                             0x00001810   Number         4  rtx_msgqueue.o(.text.osMessageQueueNew)
    [Anonymous Symbol]                       0x00001814   Section        0  rtx_msgqueue.o(.text.osMessageQueuePut)
    __arm_cp.4_0                             0x00001890   Number         4  rtx_msgqueue.o(.text.osMessageQueuePut)
    [Anonymous Symbol]                       0x00001894   Section        0  rtx_config.o(.text.osRtxErrorNotify)
    [Anonymous Symbol]                       0x000018c4   Section        0  rtx_config.o(.text.osRtxIdleThread)
    [Anonymous Symbol]                       0x000018cc   Section        0  rtx_kernel.o(.text.osRtxKernelErrorNotify)
    [Anonymous Symbol]                       0x000018d0   Section        0  rtx_kernel.o(.text.osRtxKernelPreInit)
    [Anonymous Symbol]                       0x000018d2   Section        0  rtx_memory.o(.text.osRtxMemoryAlloc)
    [Anonymous Symbol]                       0x0000193e   Section        0  rtx_memory.o(.text.osRtxMemoryFree)
    [Anonymous Symbol]                       0x00001980   Section        0  rtx_memory.o(.text.osRtxMemoryInit)
    [Anonymous Symbol]                       0x000019b6   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolAlloc)
    [Anonymous Symbol]                       0x000019f0   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolFree)
    [Anonymous Symbol]                       0x00001a3a   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolInit)
    osRtxMessageQueuePostProcess             0x00001a73   Thumb Code   170  rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess)
    [Anonymous Symbol]                       0x00001a72   Section        0  rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess)
    [Anonymous Symbol]                       0x00001b1c   Section        0  rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup)
    __arm_cp.0_0                             0x00001b3c   Number         4  rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup)
    [Anonymous Symbol]                       0x00001b40   Section        0  rtx_mutex.o(.text.osRtxMutexOwnerRelease)
    [Anonymous Symbol]                       0x00001b88   Section        0  rtx_mutex.o(.text.osRtxMutexOwnerRestore)
    [Anonymous Symbol]                       0x00001bd0   Section        0  rtx_system.o(.text.osRtxPendSV_Handler)
    [Anonymous Symbol]                       0x00001c58   Section        0  rtx_system.o(.text.osRtxPostProcess)
    __arm_cp.2_1                             0x00001cc4   Number         4  rtx_system.o(.text.osRtxPostProcess)
    osRtxThreadBlock                         0x00001cc9   Thumb Code    52  rtx_thread.o(.text.osRtxThreadBlock)
    [Anonymous Symbol]                       0x00001cc8   Section        0  rtx_thread.o(.text.osRtxThreadBlock)
    osRtxThreadDelayInsert                   0x00001cfd   Thumb Code   124  rtx_thread.o(.text.osRtxThreadDelayInsert)
    [Anonymous Symbol]                       0x00001cfc   Section        0  rtx_thread.o(.text.osRtxThreadDelayInsert)
    osRtxThreadDelayRemove                   0x00001d79   Thumb Code    60  rtx_thread.o(.text.osRtxThreadDelayRemove)
    [Anonymous Symbol]                       0x00001d78   Section        0  rtx_thread.o(.text.osRtxThreadDelayRemove)
    [Anonymous Symbol]                       0x00001db4   Section        0  rtx_thread.o(.text.osRtxThreadDelayTick)
    osRtxThreadDestroy                       0x00001e05   Thumb Code    32  rtx_thread.o(.text.osRtxThreadDestroy)
    [Anonymous Symbol]                       0x00001e04   Section        0  rtx_thread.o(.text.osRtxThreadDestroy)
    [Anonymous Symbol]                       0x00001e24   Section        0  rtx_thread.o(.text.osRtxThreadDispatch)
    osRtxThreadFree                          0x00001e75   Thumb Code    84  rtx_thread.o(.text.osRtxThreadFree)
    [Anonymous Symbol]                       0x00001e74   Section        0  rtx_thread.o(.text.osRtxThreadFree)
    __arm_cp.51_0                            0x00001ec8   Number         4  rtx_thread.o(.text.osRtxThreadFree)
    osRtxThreadJoinWakeup                    0x00001ecd   Thumb Code    30  rtx_thread.o(.text.osRtxThreadJoinWakeup)
    [Anonymous Symbol]                       0x00001ecc   Section        0  rtx_thread.o(.text.osRtxThreadJoinWakeup)
    [Anonymous Symbol]                       0x00001eea   Section        0  rtx_thread.o(.text.osRtxThreadListGet)
    [Anonymous Symbol]                       0x00001efc   Section        0  rtx_thread.o(.text.osRtxThreadListPut)
    [Anonymous Symbol]                       0x00001f28   Section        0  rtx_thread.o(.text.osRtxThreadListRemove)
    [Anonymous Symbol]                       0x00001f3c   Section        0  rtx_thread.o(.text.osRtxThreadListSort)
    osRtxThreadPostProcess                   0x00001f63   Thumb Code    40  rtx_thread.o(.text.osRtxThreadPostProcess)
    [Anonymous Symbol]                       0x00001f62   Section        0  rtx_thread.o(.text.osRtxThreadPostProcess)
    [Anonymous Symbol]                       0x00001f8c   Section        0  rtx_thread.o(.text.osRtxThreadReadyPut)
    __arm_cp.4_0                             0x00001f9c   Number         4  rtx_thread.o(.text.osRtxThreadReadyPut)
    [Anonymous Symbol]                       0x00001fa0   Section        0  rtx_thread.o(.text.osRtxThreadRegPtr)
    [Anonymous Symbol]                       0x00001fb4   Section        0  rtx_thread.o(.text.osRtxThreadStartup)
    __arm_cp.14_1                            0x00001fe4   Number         4  rtx_thread.o(.text.osRtxThreadStartup)
    [Anonymous Symbol]                       0x00001fe8   Section        0  rtx_thread.o(.text.osRtxThreadSwitch)
    [Anonymous Symbol]                       0x00001ff4   Section        0  rtx_thread.o(.text.osRtxThreadWaitEnter)
    __arm_cp.12_0                            0x0000202c   Number         4  rtx_thread.o(.text.osRtxThreadWaitEnter)
    [Anonymous Symbol]                       0x00002030   Section        0  rtx_thread.o(.text.osRtxThreadWaitExit)
    [Anonymous Symbol]                       0x00002060   Section        0  rtx_system.o(.text.osRtxTick_Handler)
    __arm_cp.0_0                             0x000020d4   Number         4  rtx_system.o(.text.osRtxTick_Handler)
    [Anonymous Symbol]                       0x000020d8   Section        0  rtx_timer.o(.text.osRtxTimerSetup)
    __arm_cp.0_0                             0x000020f0   Number         4  rtx_timer.o(.text.osRtxTimerSetup)
    __arm_cp.0_1                             0x000020f4   Number         4  rtx_timer.o(.text.osRtxTimerSetup)
    [Anonymous Symbol]                       0x000020f8   Section        0  rtx_timer.o(.text.osRtxTimerThread)
    osRtxTimerTick                           0x00002119   Thumb Code   108  rtx_timer.o(.text.osRtxTimerTick)
    [Anonymous Symbol]                       0x00002118   Section        0  rtx_timer.o(.text.osRtxTimerTick)
    __arm_cp.1_0                             0x00002184   Number         4  rtx_timer.o(.text.osRtxTimerTick)
    [Anonymous Symbol]                       0x00002188   Section        0  rtx_thread.o(.text.osThreadExit)
    __arm_cp.30_0                            0x00002190   Number         4  rtx_thread.o(.text.osThreadExit)
    [Anonymous Symbol]                       0x00002194   Section        0  rtx_thread.o(.text.osThreadNew)
    __arm_cp.16_0                            0x000021b4   Number         4  rtx_thread.o(.text.osThreadNew)
    [Anonymous Symbol]                       0x000021b8   Section        0  rtx_thread.o(.text.osThreadSetPriority)
    __arm_cp.23_0                            0x000021d8   Number         4  rtx_thread.o(.text.osThreadSetPriority)
    [Anonymous Symbol]                       0x000021dc   Section        0  rtx_thread.o(.text.osThreadYield)
    __arm_cp.25_0                            0x000021fc   Number         4  rtx_thread.o(.text.osThreadYield)
    svcRtxDelay                              0x00002201   Thumb Code    22  rtx_delay.o(.text.svcRtxDelay)
    [Anonymous Symbol]                       0x00002200   Section        0  rtx_delay.o(.text.svcRtxDelay)
    svcRtxKernelGetState                     0x00002219   Thumb Code     8  rtx_kernel.o(.text.svcRtxKernelGetState)
    [Anonymous Symbol]                       0x00002218   Section        0  rtx_kernel.o(.text.svcRtxKernelGetState)
    __arm_cp.6_0                             0x00002220   Number         4  rtx_kernel.o(.text.svcRtxKernelGetState)
    svcRtxKernelInitialize                   0x00002225   Thumb Code   244  rtx_kernel.o(.text.svcRtxKernelInitialize)
    [Anonymous Symbol]                       0x00002224   Section        0  rtx_kernel.o(.text.svcRtxKernelInitialize)
    __arm_cp.21_0                            0x00002318   Number         4  rtx_kernel.o(.text.svcRtxKernelInitialize)
    __arm_cp.21_2                            0x0000231c   Number         4  rtx_kernel.o(.text.svcRtxKernelInitialize)
    svcRtxKernelStart                        0x00002321   Thumb Code   124  rtx_kernel.o(.text.svcRtxKernelStart)
    [Anonymous Symbol]                       0x00002320   Section        0  rtx_kernel.o(.text.svcRtxKernelStart)
    __arm_cp.22_0                            0x0000239c   Number         4  rtx_kernel.o(.text.svcRtxKernelStart)
    __arm_cp.22_1                            0x000023a0   Number         4  rtx_kernel.o(.text.svcRtxKernelStart)
    __arm_cp.22_2                            0x000023a4   Number         4  rtx_kernel.o(.text.svcRtxKernelStart)
    __arm_cp.22_3                            0x000023a8   Number         4  rtx_kernel.o(.text.svcRtxKernelStart)
    svcRtxMessageQueueGet                    0x000023ad   Thumb Code   200  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    [Anonymous Symbol]                       0x000023ac   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    __arm_cp.22_0                            0x00002474   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    svcRtxMessageQueueNew                    0x00002479   Thumb Code   272  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    [Anonymous Symbol]                       0x00002478   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.1_0                             0x00002588   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.1_1                             0x0000258c   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    svcRtxMessageQueuePut                    0x00002591   Thumb Code   168  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    [Anonymous Symbol]                       0x00002590   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    svcRtxThreadExit                         0x00002639   Thumb Code    72  rtx_thread.o(.text.svcRtxThreadExit)
    [Anonymous Symbol]                       0x00002638   Section        0  rtx_thread.o(.text.svcRtxThreadExit)
    __arm_cp.53_0                            0x00002680   Number         4  rtx_thread.o(.text.svcRtxThreadExit)
    svcRtxThreadNew                          0x00002685   Thumb Code   472  rtx_thread.o(.text.svcRtxThreadNew)
    [Anonymous Symbol]                       0x00002684   Section        0  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.15_0                            0x0000285c   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.15_1                            0x00002860   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.15_2                            0x00002864   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.15_3                            0x00002868   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.15_4                            0x0000286c   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    svcRtxThreadSetPriority                  0x00002871   Thumb Code    72  rtx_thread.o(.text.svcRtxThreadSetPriority)
    [Anonymous Symbol]                       0x00002870   Section        0  rtx_thread.o(.text.svcRtxThreadSetPriority)
    svcRtxThreadYield                        0x000028b9   Thumb Code    52  rtx_thread.o(.text.svcRtxThreadYield)
    [Anonymous Symbol]                       0x000028b8   Section        0  rtx_thread.o(.text.svcRtxThreadYield)
    __arm_cp.46_0                            0x000028ec   Number         4  rtx_thread.o(.text.svcRtxThreadYield)
    i.IntEnable                              0x000028f0   Section        0  interrupt.o(i.IntEnable)
    i.IntMasterEnable                        0x00002954   Section        0  interrupt.o(i.IntMasterEnable)
    i.IntRegister                            0x00002964   Section        0  interrupt.o(i.IntRegister)
    i.UARTIntClear                           0x00002998   Section        0  uart.o(i.UARTIntClear)
    i.UARTIntEnable                          0x0000299c   Section        0  uart.o(i.UARTIntEnable)
    i.__scatterload_copy                     0x000029a4   Section       14  handlers.o(i.__scatterload_copy)
    i.__scatterload_null                     0x000029b2   Section        2  handlers.o(i.__scatterload_null)
    i.__scatterload_zeroinit                 0x000029b4   Section       14  handlers.o(i.__scatterload_zeroinit)
    g_pui32Priority                          0x000029c4   Data          32  interrupt.o(.constdata)
    .constdata                               0x000029c4   Section      268  interrupt.o(.constdata)
    g_pui32Regs                              0x000029e4   Data         156  interrupt.o(.constdata)
    g_pui32EnRegs                            0x00002a80   Data          20  interrupt.o(.constdata)
    g_pui32Dii16Regs                         0x00002a94   Data          20  interrupt.o(.constdata)
    g_pui32PendRegs                          0x00002aa8   Data          20  interrupt.o(.constdata)
    g_pui32UnpendRegs                        0x00002abc   Data          20  interrupt.o(.constdata)
    __tagsym$$used.0                         0x00002ad0   Number         0  rtx_lib.o(.rodata)
    __tagsym$$used.1                         0x00002b40   Number         0  rtx_lib.o(.rodata)
    os_idle_thread_attr                      0x00002b7c   Data          36  rtx_lib.o(.rodata.os_idle_thread_attr)
    [Anonymous Symbol]                       0x00002b7c   Section        0  rtx_lib.o(.rodata.os_idle_thread_attr)
    os_timer_mq_attr                         0x00002ba0   Data          24  rtx_lib.o(.rodata.os_timer_mq_attr)
    [Anonymous Symbol]                       0x00002ba0   Section        0  rtx_lib.o(.rodata.os_timer_mq_attr)
    os_timer_thread_attr                     0x00002bb8   Data          36  rtx_lib.o(.rodata.os_timer_thread_attr)
    [Anonymous Symbol]                       0x00002bb8   Section        0  rtx_lib.o(.rodata.os_timer_thread_attr)
    .L.str                                   0x00002bdc   Data          10  main.o(.rodata.str1.1)
    [Anonymous Symbol]                       0x00002bdc   Section        0  main.o(.rodata.str1.1)
    [Anonymous Symbol]                       0x00002be8   Section        0  rtx_kernel.o(.rodata.str1.4)
    g_pfnRAMVectors                          0x20000400   Data         620  interrupt.o(vtable)
    vtable                                   0x20000400   Section      620  interrupt.o(vtable)
    os_isr_queue                             0x20000688   Data          64  rtx_lib.o(.bss.os)
    [Anonymous Symbol]                       0x20000688   Section        0  rtx_lib.o(.bss.os)
    os_mem                                   0x200006c8   Data       32768  rtx_lib.o(.bss.os)
    PendST                                   0x200086c8   Data           1  os_systick.o(.bss.os)
    [Anonymous Symbol]                       0x200086c8   Section        0  os_systick.o(.bss.os)
    os_timer_mq_cb                           0x200086cc   Data          52  rtx_lib.o(.bss.os.msgqueue.cb)
    [Anonymous Symbol]                       0x200086cc   Section        0  rtx_lib.o(.bss.os.msgqueue.cb)
    os_timer_mq_data                         0x20008700   Data          80  rtx_lib.o(.bss.os.msgqueue.mem)
    [Anonymous Symbol]                       0x20008700   Section        0  rtx_lib.o(.bss.os.msgqueue.mem)
    os_idle_thread_cb                        0x20008750   Data          68  rtx_lib.o(.bss.os.thread.cb)
    [Anonymous Symbol]                       0x20008750   Section        0  rtx_lib.o(.bss.os.thread.cb)
    os_timer_thread_cb                       0x20008794   Data          68  rtx_lib.o(.bss.os.thread.cb)
    os_idle_thread_stack                     0x200087d8   Data         512  rtx_lib.o(.bss.os.thread.idle.stack)
    [Anonymous Symbol]                       0x200087d8   Section        0  rtx_lib.o(.bss.os.thread.idle.stack)
    os_timer_thread_stack                    0x200089d8   Data         512  rtx_lib.o(.bss.os.thread.timer.stack)
    [Anonymous Symbol]                       0x200089d8   Section        0  rtx_lib.o(.bss.os.thread.timer.stack)
    STACK                                    0x20008c18   Section      512  startup_tm4c129.o(STACK)
    FPCCR                                    0xe000ef34   Number         0  irq_armv7m.o ABSOLUTE

    Global Symbols

    Symbol Name                              Value     Ov Type        Size  Object(Section)

    BuildAttributes$$THM_ISAv4$E$P$D$K$B$S$7EM$VFPi3$EXTD16$VFPS$VFMA$PE$A:L22UL41UL21$X:L11$S22US41US21$IEEE1$IW$~IW$USESV6$~STKCKD$USESV7$~SHL$OTIME$EBA8$MICROLIB$REQ8$PRES8$EABIv2 0x00000000   Number         0  anon$$obj.o ABSOLUTE
    __Vectors                                0x00000000   Data           4  startup_tm4c129.o(RESET)
    .bss.os.evflags.cb$$Base                  - Undefined Weak Reference
    .bss.os.evflags.cb$$Limit                 - Undefined Weak Reference
    .bss.os.mempool.cb$$Base                  - Undefined Weak Reference
    .bss.os.mempool.cb$$Limit                 - Undefined Weak Reference
    .bss.os.mutex.cb$$Base                    - Undefined Weak Reference
    .bss.os.mutex.cb$$Limit                   - Undefined Weak Reference
    .bss.os.semaphore.cb$$Base                - Undefined Weak Reference
    .bss.os.semaphore.cb$$Limit               - Undefined Weak Reference
    .bss.os.timer.cb$$Base                    - Undefined Weak Reference
    .bss.os.timer.cb$$Limit                   - Undefined Weak Reference
    __cpp_initialize__aeabi_                  - Undefined Weak Reference
    __cxa_finalize                            - Undefined Weak Reference
    _clock_init                               - Undefined Weak Reference
    _microlib_exit                            - Undefined Weak Reference
    __Vectors_End                            0x00000200   Data           0  startup_tm4c129.o(RESET)
    __Vectors_Size                           0x00000200   Number         0  startup_tm4c129.o ABSOLUTE
    __main                                   0x00000201   Thumb Code     0  entry.o(.ARM.Collect$$$$00000000)
    _main_stk                                0x00000201   Thumb Code     0  entry2.o(.ARM.Collect$$$$00000001)
    _main_scatterload                        0x00000205   Thumb Code     0  entry5.o(.ARM.Collect$$$$00000004)
    __main_after_scatterload                 0x00000209   Thumb Code     0  entry5.o(.ARM.Collect$$$$00000004)
    _main_clock                              0x00000209   Thumb Code     0  entry7b.o(.ARM.Collect$$$$00000008)
    _main_cpp_init                           0x00000209   Thumb Code     0  entry8b.o(.ARM.Collect$$$$0000000A)
    _main_init                               0x00000209   Thumb Code     0  entry9a.o(.ARM.Collect$$$$0000000B)
    __rt_final_cpp                           0x00000211   Thumb Code     0  entry10a.o(.ARM.Collect$$$$0000000D)
    __rt_final_exit                          0x00000211   Thumb Code     0  entry11a.o(.ARM.Collect$$$$0000000F)
    CPUcpsid                                 0x00000215   Thumb Code     8  cpu.o(.emb_text)
    CPUprimask                               0x0000021d   Thumb Code     6  cpu.o(.emb_text)
    CPUcpsie                                 0x00000223   Thumb Code     8  cpu.o(.emb_text)
    CPUwfi                                   0x0000022b   Thumb Code     4  cpu.o(.emb_text)
    CPUbasepriSet                            0x0000022f   Thumb Code     6  cpu.o(.emb_text)
    CPUbasepriGet                            0x00000235   Thumb Code     6  cpu.o(.emb_text)
    Reset_Handler                            0x0000023d   Thumb Code     8  startup_tm4c129.o(.text)
    NMI_Handler                              0x00000245   Thumb Code     2  startup_tm4c129.o(.text)
    HardFault_Handler                        0x00000247   Thumb Code     2  startup_tm4c129.o(.text)
    MemManage_Handler                        0x00000249   Thumb Code     2  startup_tm4c129.o(.text)
    BusFault_Handler                         0x0000024b   Thumb Code     2  startup_tm4c129.o(.text)
    UsageFault_Handler                       0x0000024d   Thumb Code     2  startup_tm4c129.o(.text)
    DebugMon_Handler                         0x00000251   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOA_Handler                            0x00000257   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOB_Handler                            0x00000259   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOC_Handler                            0x0000025b   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOD_Handler                            0x0000025d   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOE_Handler                            0x0000025f   Thumb Code     2  startup_tm4c129.o(.text)
    UART0_Handler                            0x00000261   Thumb Code     2  startup_tm4c129.o(.text)
    UART1_Handler                            0x00000263   Thumb Code     2  startup_tm4c129.o(.text)
    SSI0_Handler                             0x00000265   Thumb Code     2  startup_tm4c129.o(.text)
    I2C0_Handler                             0x00000267   Thumb Code     2  startup_tm4c129.o(.text)
    PMW0_FAULT_Handler                       0x00000269   Thumb Code     2  startup_tm4c129.o(.text)
    PWM0_0_Handler                           0x0000026b   Thumb Code     2  startup_tm4c129.o(.text)
    PWM0_1_Handler                           0x0000026d   Thumb Code     2  startup_tm4c129.o(.text)
    PWM0_2_Handler                           0x0000026f   Thumb Code     2  startup_tm4c129.o(.text)
    QEI0_Handler                             0x00000271   Thumb Code     2  startup_tm4c129.o(.text)
    ADC0SS0_Handler                          0x00000273   Thumb Code     2  startup_tm4c129.o(.text)
    ADC0SS1_Handler                          0x00000275   Thumb Code     2  startup_tm4c129.o(.text)
    ADC0SS2_Handler                          0x00000277   Thumb Code     2  startup_tm4c129.o(.text)
    ADC0SS3_Handler                          0x00000279   Thumb Code     2  startup_tm4c129.o(.text)
    WDT0_Handler                             0x0000027b   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER0A_Handler                          0x0000027d   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER0B_Handler                          0x0000027f   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER1A_Handler                          0x00000281   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER1B_Handler                          0x00000283   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER2A_Handler                          0x00000285   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER2B_Handler                          0x00000287   Thumb Code     2  startup_tm4c129.o(.text)
    COMP0_Handler                            0x00000289   Thumb Code     2  startup_tm4c129.o(.text)
    COMP1_Handler                            0x0000028b   Thumb Code     2  startup_tm4c129.o(.text)
    COMP2_Handler                            0x0000028d   Thumb Code     2  startup_tm4c129.o(.text)
    SYSCTL_Handler                           0x0000028f   Thumb Code     2  startup_tm4c129.o(.text)
    FLASH_Handler                            0x00000291   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOF_Handler                            0x00000293   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOG_Handler                            0x00000295   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOH_Handler                            0x00000297   Thumb Code     2  startup_tm4c129.o(.text)
    UART2_Handler                            0x00000299   Thumb Code     2  startup_tm4c129.o(.text)
    SSI1_Handler                             0x0000029b   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER3A_Handler                          0x0000029d   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER3B_Handler                          0x0000029f   Thumb Code     2  startup_tm4c129.o(.text)
    I2C1_Handler                             0x000002a1   Thumb Code     2  startup_tm4c129.o(.text)
    CAN0_Handler                             0x000002a3   Thumb Code     2  startup_tm4c129.o(.text)
    CAN1_Handler                             0x000002a5   Thumb Code     2  startup_tm4c129.o(.text)
    ETH_Handler                              0x000002a7   Thumb Code     2  startup_tm4c129.o(.text)
    HIB_Handler                              0x000002a9   Thumb Code     2  startup_tm4c129.o(.text)
    USB0_Handler                             0x000002ab   Thumb Code     2  startup_tm4c129.o(.text)
    PWM0_3_Handler                           0x000002ad   Thumb Code     2  startup_tm4c129.o(.text)
    UDMA_Handler                             0x000002af   Thumb Code     2  startup_tm4c129.o(.text)
    UDMAERR_Handler                          0x000002b1   Thumb Code     2  startup_tm4c129.o(.text)
    ADC1SS0_Handler                          0x000002b3   Thumb Code     2  startup_tm4c129.o(.text)
    ADC1SS1_Handler                          0x000002b5   Thumb Code     2  startup_tm4c129.o(.text)
    ADC1SS2_Handler                          0x000002b7   Thumb Code     2  startup_tm4c129.o(.text)
    ADC1SS3_Handler                          0x000002b9   Thumb Code     2  startup_tm4c129.o(.text)
    EBI0_Handler                             0x000002bb   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOJ_Handler                            0x000002bd   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOK_Handler                            0x000002bf   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOL_Handler                            0x000002c1   Thumb Code     2  startup_tm4c129.o(.text)
    SSI2_Handler                             0x000002c3   Thumb Code     2  startup_tm4c129.o(.text)
    SSI3_Handler                             0x000002c5   Thumb Code     2  startup_tm4c129.o(.text)
    UART3_Handler                            0x000002c7   Thumb Code     2  startup_tm4c129.o(.text)
    UART4_Handler                            0x000002c9   Thumb Code     2  startup_tm4c129.o(.text)
    UART5_Handler                            0x000002cb   Thumb Code     2  startup_tm4c129.o(.text)
    UART6_Handler                            0x000002cd   Thumb Code     2  startup_tm4c129.o(.text)
    UART7_Handler                            0x000002cf   Thumb Code     2  startup_tm4c129.o(.text)
    I2C2_Handler                             0x000002d1   Thumb Code     2  startup_tm4c129.o(.text)
    I2C3_Handler                             0x000002d3   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER4A_Handler                          0x000002d5   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER4B_Handler                          0x000002d7   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER5A_Handler                          0x000002d9   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER5B_Handler                          0x000002db   Thumb Code     2  startup_tm4c129.o(.text)
    WTIMER0A_Handler                         0x000002dd   Thumb Code     2  startup_tm4c129.o(.text)
    WTIMER0B_Handler                         0x000002df   Thumb Code     2  startup_tm4c129.o(.text)
    WTIMER1A_Handler                         0x000002e1   Thumb Code     2  startup_tm4c129.o(.text)
    WTIMER1B_Handler                         0x000002e3   Thumb Code     2  startup_tm4c129.o(.text)
    WTIMER2A_Handler                         0x000002e5   Thumb Code     2  startup_tm4c129.o(.text)
    WTIMER2B_Handler                         0x000002e7   Thumb Code     2  startup_tm4c129.o(.text)
    WTIMER3A_Handler                         0x000002e9   Thumb Code     2  startup_tm4c129.o(.text)
    WTIMER3B_Handler                         0x000002eb   Thumb Code     2  startup_tm4c129.o(.text)
    WTIMER4A_Handler                         0x000002ed   Thumb Code     2  startup_tm4c129.o(.text)
    WTIMER4B_Handler                         0x000002ef   Thumb Code     2  startup_tm4c129.o(.text)
    WTIMER5A_Handler                         0x000002f1   Thumb Code     2  startup_tm4c129.o(.text)
    WTIMER5B_Handler                         0x000002f3   Thumb Code     2  startup_tm4c129.o(.text)
    FPU_Handler                              0x000002f5   Thumb Code     2  startup_tm4c129.o(.text)
    I2C4_Handler                             0x000002f7   Thumb Code     2  startup_tm4c129.o(.text)
    I2C5_Handler                             0x000002f9   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOM_Handler                            0x000002fb   Thumb Code     2  startup_tm4c129.o(.text)
    GPION_Handler                            0x000002fd   Thumb Code     2  startup_tm4c129.o(.text)
    TAMPER_Handler                           0x000002ff   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOP0_Handler                           0x00000301   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOP1_Handler                           0x00000303   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOP2_Handler                           0x00000305   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOP3_Handler                           0x00000307   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOP4_Handler                           0x00000309   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOP5_Handler                           0x0000030b   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOP6_Handler                           0x0000030d   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOP7_Handler                           0x0000030f   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOQ0_Handler                           0x00000311   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOQ1_Handler                           0x00000313   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOQ2_Handler                           0x00000315   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOQ3_Handler                           0x00000317   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOQ4_Handler                           0x00000319   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOQ5_Handler                           0x0000031b   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOQ6_Handler                           0x0000031d   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOQ7_Handler                           0x0000031f   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOR_Handler                            0x00000321   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOS_Handler                            0x00000323   Thumb Code     2  startup_tm4c129.o(.text)
    SHAMD5_Handler                           0x00000325   Thumb Code     2  startup_tm4c129.o(.text)
    AES_Handler                              0x00000327   Thumb Code     2  startup_tm4c129.o(.text)
    DES3DES_Handler                          0x00000329   Thumb Code     2  startup_tm4c129.o(.text)
    LCDCONTROLLER_Handler                    0x0000032b   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER6A_Handler                          0x0000032d   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER6B_Handler                          0x0000032f   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER7A_Handler                          0x00000331   Thumb Code     2  startup_tm4c129.o(.text)
    TIMER7B_Handler                          0x00000333   Thumb Code     2  startup_tm4c129.o(.text)
    I2C6_Handler                             0x00000335   Thumb Code     2  startup_tm4c129.o(.text)
    I2C7_Handler                             0x00000337   Thumb Code     2  startup_tm4c129.o(.text)
    HIMSCANKEYBOARD_Handler                  0x00000339   Thumb Code     2  startup_tm4c129.o(.text)
    ONEWIRE_Handler                          0x0000033b   Thumb Code     2  startup_tm4c129.o(.text)
    HIMPS2_Handler                           0x0000033d   Thumb Code     2  startup_tm4c129.o(.text)
    HIMLEDSEQUENCER_Handler                  0x0000033f   Thumb Code     2  startup_tm4c129.o(.text)
    HIMCONSUMERIR_Handler                    0x00000341   Thumb Code     2  startup_tm4c129.o(.text)
    I2C8_Handler                             0x00000343   Thumb Code     2  startup_tm4c129.o(.text)
    I2C9_Handler                             0x00000345   Thumb Code     2  startup_tm4c129.o(.text)
    GPIOT_Handler                            0x00000347   Thumb Code     2  startup_tm4c129.o(.text)
    SVC_Handler                              0x00000351   Thumb Code   154  irq_armv7m.o(.text)
    PendSV_Handler                           0x000003eb   Thumb Code    16  irq_armv7m.o(.text)
    SysTick_Handler                          0x000003fb   Thumb Code    16  irq_armv7m.o(.text)
    abs                                      0x00000419   Thumb Code     8  siabs.o(.text)
    __aeabi_memcpy                           0x00000421   Thumb Code    36  memcpya.o(.text)
    __aeabi_memcpy4                          0x00000421   Thumb Code     0  memcpya.o(.text)
    __aeabi_memcpy8                          0x00000421   Thumb Code     0  memcpya.o(.text)
    __aeabi_memset                           0x00000445   Thumb Code    14  memseta.o(.text)
    __aeabi_memset4                          0x00000445   Thumb Code     0  memseta.o(.text)
    __aeabi_memset8                          0x00000445   Thumb Code     0  memseta.o(.text)
    __aeabi_memclr                           0x00000453   Thumb Code     4  memseta.o(.text)
    __aeabi_memclr4                          0x00000453   Thumb Code     0  memseta.o(.text)
    __aeabi_memclr8                          0x00000453   Thumb Code     0  memseta.o(.text)
    _memset$wrapper                          0x00000457   Thumb Code    18  memseta.o(.text)
    strcpy                                   0x00000469   Thumb Code    18  strcpy.o(.text)
    __scatterload                            0x0000047d   Thumb Code    28  init.o(.text)
    __scatterload_rt2                        0x0000047d   Thumb Code     0  init.o(.text)
    __decompress                             0x000004a1   Thumb Code     0  __dczerorl.o(.text)
    __decompress0                            0x000004a1   Thumb Code    58  __dczerorl.o(.text)
    ChangeButtonStatus                       0x000004dd   Thumb Code    50  main.o(.text.ChangeButtonStatus)
    ChangeDoorStatus                         0x00000511   Thumb Code    38  main.o(.text.ChangeDoorStatus)
    GetFloorCharFromFloorNumberString        0x00000539   Thumb Code   348  main.o(.text.GetFloorCharFromFloorNumberString)
    GetFloorIntFromFloorNumberChar           0x00000695   Thumb Code   348  main.o(.text.GetFloorIntFromFloorNumberChar)
    InitElevator                             0x000007f1   Thumb Code    32  main.o(.text.InitElevator)
    InitElevators                            0x00000811   Thumb Code    22  main.o(.text.InitElevators)
    MovElevator                              0x000008dd   Thumb Code    38  main.o(.text.MovElevator)
    OS_Tick_AcknowledgeIRQ                   0x00000905   Thumb Code     8  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    OS_Tick_Enable                           0x0000090d   Thumb Code    32  os_systick.o(.text.OS_Tick_Enable)
    OS_Tick_GetIRQn                          0x00000931   Thumb Code     6  os_systick.o(.text.OS_Tick_GetIRQn)
    OS_Tick_Setup                            0x00000939   Thumb Code    48  os_systick.o(.text.OS_Tick_Setup)
    SetDirection                             0x000009a5   Thumb Code    72  main.o(.text.SetDirection)
    SetMovement                              0x000009ed   Thumb Code    46  main.o(.text.SetMovement)
    SetupUart                                0x00000a1d   Thumb Code    60  main.o(.text.SetupUart)
    StopElevator                             0x00000a59   Thumb Code    32  main.o(.text.StopElevator)
    SystemInit                               0x00000a79   Thumb Code    36  system_tm4c129.o(.text.SystemInit)
    ThreadCentral                            0x00000a9d   Thumb Code   514  main.o(.text.ThreadCentral)
    ThreadController                         0x00000ca1   Thumb Code   534  main.o(.text.ThreadController)
    ThreadLeft                               0x00000f1d   Thumb Code   514  main.o(.text.ThreadLeft)
    ThreadRight                              0x00001121   Thumb Code   514  main.o(.text.ThreadRight)
    UARTIntHandler                           0x0000136d   Thumb Code   126  main.o(.text.UARTIntHandler)
    UART_InChar                              0x000013ed   Thumb Code    36  uart.o(.text.UART_InChar)
    UART_Init                                0x00001411   Thumb Code   242  uart.o(.text.UART_Init)
    UART_OutChar                             0x00001505   Thumb Code    46  uart.o(.text.UART_OutChar)
    main                                     0x00001535   Thumb Code   424  main.o(.text.main)
    osDelay                                  0x000016dd   Thumb Code    32  rtx_delay.o(.text.osDelay)
    osKernelGetState                         0x00001701   Thumb Code    40  rtx_kernel.o(.text.osKernelGetState)
    osKernelInitialize                       0x00001731   Thumb Code    40  rtx_kernel.o(.text.osKernelInitialize)
    osKernelStart                            0x0000175d   Thumb Code    32  rtx_kernel.o(.text.osKernelStart)
    osMessageQueueGet                        0x00001781   Thumb Code   108  rtx_msgqueue.o(.text.osMessageQueueGet)
    osMessageQueueNew                        0x000017f1   Thumb Code    32  rtx_msgqueue.o(.text.osMessageQueueNew)
    osMessageQueuePut                        0x00001815   Thumb Code   124  rtx_msgqueue.o(.text.osMessageQueuePut)
    osRtxErrorNotify                         0x00001895   Thumb Code    46  rtx_config.o(.text.osRtxErrorNotify)
    osRtxIdleThread                          0x000018c5   Thumb Code     8  rtx_config.o(.text.osRtxIdleThread)
    osRtxKernelErrorNotify                   0x000018cd   Thumb Code     4  rtx_kernel.o(.text.osRtxKernelErrorNotify)
    osRtxKernelPreInit                       0x000018d1   Thumb Code     2  rtx_kernel.o(.text.osRtxKernelPreInit)
    osRtxMemoryAlloc                         0x000018d3   Thumb Code   108  rtx_memory.o(.text.osRtxMemoryAlloc)
    osRtxMemoryFree                          0x0000193f   Thumb Code    66  rtx_memory.o(.text.osRtxMemoryFree)
    osRtxMemoryInit                          0x00001981   Thumb Code    54  rtx_memory.o(.text.osRtxMemoryInit)
    osRtxMemoryPoolAlloc                     0x000019b7   Thumb Code    58  rtx_mempool.o(.text.osRtxMemoryPoolAlloc)
    osRtxMemoryPoolFree                      0x000019f1   Thumb Code    74  rtx_mempool.o(.text.osRtxMemoryPoolFree)
    osRtxMemoryPoolInit                      0x00001a3b   Thumb Code    56  rtx_mempool.o(.text.osRtxMemoryPoolInit)
    osRtxMessageQueueTimerSetup              0x00001b1d   Thumb Code    32  rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup)
    osRtxMutexOwnerRelease                   0x00001b41   Thumb Code    72  rtx_mutex.o(.text.osRtxMutexOwnerRelease)
    osRtxMutexOwnerRestore                   0x00001b89   Thumb Code    72  rtx_mutex.o(.text.osRtxMutexOwnerRestore)
    osRtxPendSV_Handler                      0x00001bd1   Thumb Code   136  rtx_system.o(.text.osRtxPendSV_Handler)
    osRtxPostProcess                         0x00001c59   Thumb Code   108  rtx_system.o(.text.osRtxPostProcess)
    osRtxThreadDelayTick                     0x00001db5   Thumb Code    80  rtx_thread.o(.text.osRtxThreadDelayTick)
    osRtxThreadDispatch                      0x00001e25   Thumb Code    80  rtx_thread.o(.text.osRtxThreadDispatch)
    osRtxThreadListGet                       0x00001eeb   Thumb Code    18  rtx_thread.o(.text.osRtxThreadListGet)
    osRtxThreadListPut                       0x00001efd   Thumb Code    44  rtx_thread.o(.text.osRtxThreadListPut)
    osRtxThreadListRemove                    0x00001f29   Thumb Code    20  rtx_thread.o(.text.osRtxThreadListRemove)
    osRtxThreadListSort                      0x00001f3d   Thumb Code    38  rtx_thread.o(.text.osRtxThreadListSort)
    osRtxThreadReadyPut                      0x00001f8d   Thumb Code    16  rtx_thread.o(.text.osRtxThreadReadyPut)
    osRtxThreadRegPtr                        0x00001fa1   Thumb Code    20  rtx_thread.o(.text.osRtxThreadRegPtr)
    osRtxThreadStartup                       0x00001fb5   Thumb Code    48  rtx_thread.o(.text.osRtxThreadStartup)
    osRtxThreadSwitch                        0x00001fe9   Thumb Code    12  rtx_thread.o(.text.osRtxThreadSwitch)
    osRtxThreadWaitEnter                     0x00001ff5   Thumb Code    56  rtx_thread.o(.text.osRtxThreadWaitEnter)
    osRtxThreadWaitExit                      0x00002031   Thumb Code    48  rtx_thread.o(.text.osRtxThreadWaitExit)
    osRtxTick_Handler                        0x00002061   Thumb Code   116  rtx_system.o(.text.osRtxTick_Handler)
    osRtxTimerSetup                          0x000020d9   Thumb Code    24  rtx_timer.o(.text.osRtxTimerSetup)
    osRtxTimerThread                         0x000020f9   Thumb Code    32  rtx_timer.o(.text.osRtxTimerThread)
    osThreadExit                             0x00002189   Thumb Code     8  rtx_thread.o(.text.osThreadExit)
    osThreadNew                              0x00002195   Thumb Code    32  rtx_thread.o(.text.osThreadNew)
    osThreadSetPriority                      0x000021b9   Thumb Code    32  rtx_thread.o(.text.osThreadSetPriority)
    osThreadYield                            0x000021dd   Thumb Code    32  rtx_thread.o(.text.osThreadYield)
    IntEnable                                0x000028f1   Thumb Code    92  interrupt.o(i.IntEnable)
    IntMasterEnable                          0x00002955   Thumb Code    14  interrupt.o(i.IntMasterEnable)
    IntRegister                              0x00002965   Thumb Code    44  interrupt.o(i.IntRegister)
    UARTIntClear                             0x00002999   Thumb Code     4  uart.o(i.UARTIntClear)
    UARTIntEnable                            0x0000299d   Thumb Code     8  uart.o(i.UARTIntEnable)
    __scatterload_copy                       0x000029a5   Thumb Code    14  handlers.o(i.__scatterload_copy)
    __scatterload_null                       0x000029b3   Thumb Code     2  handlers.o(i.__scatterload_null)
    __scatterload_zeroinit                   0x000029b5   Thumb Code    14  handlers.o(i.__scatterload_zeroinit)
    osRtxConfig                              0x00002ad0   Data         112  rtx_lib.o(.rodata)
    os_cb_sections                           0x00002b40   Data          56  rtx_lib.o(.rodata)
    osRtxUserSVC                             0x00002b78   Data           4  rtx_lib.o(.rodata.osRtxUserSVC)
    Region$$Table$$Base                      0x00002bf4   Number         0  anon$$obj.o(Region$$Table)
    Region$$Table$$Limit                     0x00002c14   Number         0  anon$$obj.o(Region$$Table)
    SystemCoreClock                          0x20000000   Data           4  system_tm4c129.o(.data.SystemCoreClock)
    osRtxInfo                                0x20000004   Data         164  rtx_kernel.o(.data.os)
    elevators                                0x20000670   Data          24  main.o(.bss.elevators)
    .bss.os.msgqueue.cb$$Base                0x200086cc   Number         0  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.msgqueue.cb$$Limit               0x20008700   Number         0  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.thread.cb$$Base                  0x20008750   Number         0  rtx_lib.o(.bss.os.thread.cb)
    .bss.os.thread.cb$$Limit                 0x200087d8   Number         0  rtx_lib.o(.bss.os.thread.cb)
    qidCentralCommands                       0x20008bd8   Data           4  main.o(.bss.qidCentralCommands)
    qidCentralResponses                      0x20008bdc   Data           4  main.o(.bss.qidCentralResponses)
    qidController                            0x20008be0   Data           4  main.o(.bss.qidController)
    qidLeftCommands                          0x20008be4   Data           4  main.o(.bss.qidLeftCommands)
    qidLeftResponses                         0x20008be8   Data           4  main.o(.bss.qidLeftResponses)
    qidRightCommands                         0x20008bec   Data           4  main.o(.bss.qidRightCommands)
    qidRightResponses                        0x20008bf0   Data           4  main.o(.bss.qidRightResponses)
    tidCentral                               0x20008bf4   Data           4  main.o(.bss.tidCentral)
    tidController                            0x20008bf8   Data           4  main.o(.bss.tidController)
    tidLeft                                  0x20008bfc   Data           4  main.o(.bss.tidLeft)
    tidRight                                 0x20008c00   Data           4  main.o(.bss.tidRight)
    uartMsg                                  0x20008c04   Data          16  main.o(.bss.uartMsg)
    __initial_sp                             0x20008e18   Data           0  startup_tm4c129.o(STACK)



==============================================================================

Memory Map of the image

  Image Entry point : 0x0000023d

  Load Region LR_1 (Base: 0x00000000, Size: 0x0000366c, Max: 0xffffffff, ABSOLUTE, COMPRESSED[0x0000301c])

    Execution Region ER_RO (Exec base: 0x00000000, Load base: 0x00000000, Size: 0x00002c14, Max: 0xffffffff, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x00000000   0x00000000   0x00000200   Data   RO          107    RESET               startup_tm4c129.o
    0x00000200   0x00000200   0x00000000   Code   RO         1058  * .ARM.Collect$$$$00000000  mc_w.l(entry.o)
    0x00000200   0x00000200   0x00000004   Code   RO         1073    .ARM.Collect$$$$00000001  mc_w.l(entry2.o)
    0x00000204   0x00000204   0x00000004   Code   RO         1076    .ARM.Collect$$$$00000004  mc_w.l(entry5.o)
    0x00000208   0x00000208   0x00000000   Code   RO         1078    .ARM.Collect$$$$00000008  mc_w.l(entry7b.o)
    0x00000208   0x00000208   0x00000000   Code   RO         1080    .ARM.Collect$$$$0000000A  mc_w.l(entry8b.o)
    0x00000208   0x00000208   0x00000008   Code   RO         1081    .ARM.Collect$$$$0000000B  mc_w.l(entry9a.o)
    0x00000210   0x00000210   0x00000000   Code   RO         1083    .ARM.Collect$$$$0000000D  mc_w.l(entry10a.o)
    0x00000210   0x00000210   0x00000000   Code   RO         1085    .ARM.Collect$$$$0000000F  mc_w.l(entry11a.o)
    0x00000210   0x00000210   0x00000004   Code   RO         1074    .ARM.Collect$$$$00002712  mc_w.l(entry2.o)
    0x00000214   0x00000214   0x00000026   Code   RO          905    .emb_text           driverlib.lib(cpu.o)
    0x0000023a   0x0000023a   0x00000002   PAD
    0x0000023c   0x0000023c   0x00000114   Code   RO          108  * .text               startup_tm4c129.o
    0x00000350   0x00000350   0x000000c8   Code   RO          898    .text               RTX_CM4F.lib(irq_armv7m.o)
    0x00000418   0x00000418   0x00000008   Code   RO         1061    .text               mc_w.l(siabs.o)
    0x00000420   0x00000420   0x00000024   Code   RO         1065    .text               mc_w.l(memcpya.o)
    0x00000444   0x00000444   0x00000024   Code   RO         1067    .text               mc_w.l(memseta.o)
    0x00000468   0x00000468   0x00000012   Code   RO         1069    .text               mc_w.l(strcpy.o)
    0x0000047a   0x0000047a   0x00000002   PAD
    0x0000047c   0x0000047c   0x00000024   Code   RO         1087    .text               mc_w.l(init.o)
    0x000004a0   0x000004a0   0x0000003a   Code   RO         1097    .text               mc_w.l(__dczerorl.o)
    0x000004da   0x000004da   0x00000002   PAD
    0x000004dc   0x000004dc   0x00000032   Code   RO           14    .text.ChangeButtonStatus  main.o
    0x0000050e   0x0000050e   0x00000002   PAD
    0x00000510   0x00000510   0x00000026   Code   RO           20    .text.ChangeDoorStatus  main.o
    0x00000536   0x00000536   0x00000002   PAD
    0x00000538   0x00000538   0x0000015c   Code   RO           22    .text.GetFloorCharFromFloorNumberString  main.o
    0x00000694   0x00000694   0x0000015c   Code   RO           16    .text.GetFloorIntFromFloorNumberChar  main.o
    0x000007f0   0x000007f0   0x00000020   Code   RO           28    .text.InitElevator  main.o
    0x00000810   0x00000810   0x00000016   Code   RO           26    .text.InitElevators  main.o
    0x00000826   0x00000826   0x00000040   Code   RO          879    .text.MessageQueueGet  RTX_CM4F.lib(rtx_msgqueue.o)
    0x00000866   0x00000866   0x00000058   Code   RO          873    .text.MessageQueuePut  RTX_CM4F.lib(rtx_msgqueue.o)
    0x000008be   0x000008be   0x0000001c   Code   RO          871    .text.MessageQueueRemove  RTX_CM4F.lib(rtx_msgqueue.o)
    0x000008da   0x000008da   0x00000002   PAD
    0x000008dc   0x000008dc   0x00000026   Code   RO           30    .text.MovElevator   main.o
    0x00000902   0x00000902   0x00000002   PAD
    0x00000904   0x00000904   0x00000008   Code   RO         1038    .text.OS_Tick_AcknowledgeIRQ  RTX_CM4F.lib(os_systick.o)
    0x0000090c   0x0000090c   0x00000024   Code   RO         1034    .text.OS_Tick_Enable  RTX_CM4F.lib(os_systick.o)
    0x00000930   0x00000930   0x00000006   Code   RO         1040    .text.OS_Tick_GetIRQn  RTX_CM4F.lib(os_systick.o)
    0x00000936   0x00000936   0x00000002   PAD
    0x00000938   0x00000938   0x00000040   Code   RO         1032    .text.OS_Tick_Setup  RTX_CM4F.lib(os_systick.o)
    0x00000978   0x00000978   0x0000000c   Code   RO          621    .text.OUTLINED_FUNCTION_0  RTX_CM4F.lib(rtx_kernel.o)
    0x00000984   0x00000984   0x00000006   Code   RO          761    .text.OUTLINED_FUNCTION_0  RTX_CM4F.lib(rtx_thread.o)
    0x0000098a   0x0000098a   0x0000000c   Code   RO          887    .text.OUTLINED_FUNCTION_0  RTX_CM4F.lib(rtx_msgqueue.o)
    0x00000996   0x00000996   0x00000006   Code   RO          623    .text.OUTLINED_FUNCTION_1  RTX_CM4F.lib(rtx_kernel.o)
    0x0000099c   0x0000099c   0x00000006   Code   RO          889    .text.OUTLINED_FUNCTION_1  RTX_CM4F.lib(rtx_msgqueue.o)
    0x000009a2   0x000009a2   0x00000002   PAD
    0x000009a4   0x000009a4   0x00000048   Code   RO           32    .text.SetDirection  main.o
    0x000009ec   0x000009ec   0x0000002e   Code   RO           24    .text.SetMovement   main.o
    0x00000a1a   0x00000a1a   0x00000002   PAD
    0x00000a1c   0x00000a1c   0x0000003c   Code   RO           12    .text.SetupUart     main.o
    0x00000a58   0x00000a58   0x00000020   Code   RO           18    .text.StopElevator  main.o
    0x00000a78   0x00000a78   0x00000024   Code   RO          117    .text.SystemInit    system_tm4c129.o
    0x00000a9c   0x00000a9c   0x00000202   Code   RO            4    .text.ThreadCentral  main.o
    0x00000c9e   0x00000c9e   0x00000002   PAD
    0x00000ca0   0x00000ca0   0x00000216   Code   RO           10    .text.ThreadController  main.o
    0x00000eb6   0x00000eb6   0x00000064   Code   RO          713    .text.ThreadFlagsCheck  RTX_CM4F.lib(rtx_thread.o)
    0x00000f1a   0x00000f1a   0x00000002   PAD
    0x00000f1c   0x00000f1c   0x00000202   Code   RO            6    .text.ThreadLeft    main.o
    0x0000111e   0x0000111e   0x00000002   PAD
    0x00001120   0x00001120   0x00000202   Code   RO            8    .text.ThreadRight   main.o
    0x00001322   0x00001322   0x00000002   PAD
    0x00001324   0x00001324   0x00000048   Code   RO          813    .text.TimerInsert   RTX_CM4F.lib(rtx_timer.o)
    0x0000136c   0x0000136c   0x0000007e   Code   RO           34    .text.UARTIntHandler  main.o
    0x000013ea   0x000013ea   0x00000002   PAD
    0x000013ec   0x000013ec   0x00000024   Code   RO           60    .text.UART_InChar   uart.o
    0x00001410   0x00001410   0x000000f2   Code   RO           58    .text.UART_Init     uart.o
    0x00001502   0x00001502   0x00000002   PAD
    0x00001504   0x00001504   0x0000002e   Code   RO           62    .text.UART_OutChar  uart.o
    0x00001532   0x00001532   0x00000002   PAD
    0x00001534   0x00001534   0x000001a8   Code   RO            2    .text.main          main.o
    0x000016dc   0x000016dc   0x00000024   Code   RO          779    .text.osDelay       RTX_CM4F.lib(rtx_delay.o)
    0x00001700   0x00001700   0x00000030   Code   RO          573    .text.osKernelGetState  RTX_CM4F.lib(rtx_kernel.o)
    0x00001730   0x00001730   0x0000002c   Code   RO          567    .text.osKernelInitialize  RTX_CM4F.lib(rtx_kernel.o)
    0x0000175c   0x0000175c   0x00000024   Code   RO          577    .text.osKernelStart  RTX_CM4F.lib(rtx_kernel.o)
    0x00001780   0x00001780   0x00000070   Code   RO          847    .text.osMessageQueueGet  RTX_CM4F.lib(rtx_msgqueue.o)
    0x000017f0   0x000017f0   0x00000024   Code   RO          841    .text.osMessageQueueNew  RTX_CM4F.lib(rtx_msgqueue.o)
    0x00001814   0x00001814   0x00000080   Code   RO          845    .text.osMessageQueuePut  RTX_CM4F.lib(rtx_msgqueue.o)
    0x00001894   0x00001894   0x0000002e   Code   RO           97    .text.osRtxErrorNotify  rtx_config.o
    0x000018c2   0x000018c2   0x00000002   PAD
    0x000018c4   0x000018c4   0x00000008   Code   RO           95    .text.osRtxIdleThread  rtx_config.o
    0x000018cc   0x000018cc   0x00000004   Code   RO          565    .text.osRtxKernelErrorNotify  RTX_CM4F.lib(rtx_kernel.o)
    0x000018d0   0x000018d0   0x00000002   Code   RO          563    .text.osRtxKernelPreInit  RTX_CM4F.lib(rtx_kernel.o)
    0x000018d2   0x000018d2   0x0000006c   Code   RO          954    .text.osRtxMemoryAlloc  RTX_CM4F.lib(rtx_memory.o)
    0x0000193e   0x0000193e   0x00000042   Code   RO          956    .text.osRtxMemoryFree  RTX_CM4F.lib(rtx_memory.o)
    0x00001980   0x00001980   0x00000036   Code   RO          952    .text.osRtxMemoryInit  RTX_CM4F.lib(rtx_memory.o)
    0x000019b6   0x000019b6   0x0000003a   Code   RO          968    .text.osRtxMemoryPoolAlloc  RTX_CM4F.lib(rtx_mempool.o)
    0x000019f0   0x000019f0   0x0000004a   Code   RO          970    .text.osRtxMemoryPoolFree  RTX_CM4F.lib(rtx_mempool.o)
    0x00001a3a   0x00001a3a   0x00000038   Code   RO          966    .text.osRtxMemoryPoolInit  RTX_CM4F.lib(rtx_mempool.o)
    0x00001a72   0x00001a72   0x000000aa   Code   RO          869    .text.osRtxMessageQueuePostProcess  RTX_CM4F.lib(rtx_msgqueue.o)
    0x00001b1c   0x00001b1c   0x00000024   Code   RO          837    .text.osRtxMessageQueueTimerSetup  RTX_CM4F.lib(rtx_msgqueue.o)
    0x00001b40   0x00001b40   0x00000048   Code   RO          916    .text.osRtxMutexOwnerRelease  RTX_CM4F.lib(rtx_mutex.o)
    0x00001b88   0x00001b88   0x00000048   Code   RO          918    .text.osRtxMutexOwnerRestore  RTX_CM4F.lib(rtx_mutex.o)
    0x00001bd0   0x00001bd0   0x00000088   Code   RO         1020    .text.osRtxPendSV_Handler  RTX_CM4F.lib(rtx_system.o)
    0x00001c58   0x00001c58   0x00000070   Code   RO         1022    .text.osRtxPostProcess  RTX_CM4F.lib(rtx_system.o)
    0x00001cc8   0x00001cc8   0x00000034   Code   RO          653    .text.osRtxThreadBlock  RTX_CM4F.lib(rtx_thread.o)
    0x00001cfc   0x00001cfc   0x0000007c   Code   RO          661    .text.osRtxThreadDelayInsert  RTX_CM4F.lib(rtx_thread.o)
    0x00001d78   0x00001d78   0x0000003c   Code   RO          657    .text.osRtxThreadDelayRemove  RTX_CM4F.lib(rtx_thread.o)
    0x00001db4   0x00001db4   0x00000050   Code   RO          645    .text.osRtxThreadDelayTick  RTX_CM4F.lib(rtx_thread.o)
    0x00001e04   0x00001e04   0x00000020   Code   RO          745    .text.osRtxThreadDestroy  RTX_CM4F.lib(rtx_thread.o)
    0x00001e24   0x00001e24   0x00000050   Code   RO          651    .text.osRtxThreadDispatch  RTX_CM4F.lib(rtx_thread.o)
    0x00001e74   0x00001e74   0x00000058   Code   RO          737    .text.osRtxThreadFree  RTX_CM4F.lib(rtx_thread.o)
    0x00001ecc   0x00001ecc   0x0000001e   Code   RO          743    .text.osRtxThreadJoinWakeup  RTX_CM4F.lib(rtx_thread.o)
    0x00001eea   0x00001eea   0x00000012   Code   RO          637    .text.osRtxThreadListGet  RTX_CM4F.lib(rtx_thread.o)
    0x00001efc   0x00001efc   0x0000002c   Code   RO          635    .text.osRtxThreadListPut  RTX_CM4F.lib(rtx_thread.o)
    0x00001f28   0x00001f28   0x00000014   Code   RO          641    .text.osRtxThreadListRemove  RTX_CM4F.lib(rtx_thread.o)
    0x00001f3c   0x00001f3c   0x00000026   Code   RO          639    .text.osRtxThreadListSort  RTX_CM4F.lib(rtx_thread.o)
    0x00001f62   0x00001f62   0x00000028   Code   RO          711    .text.osRtxThreadPostProcess  RTX_CM4F.lib(rtx_thread.o)
    0x00001f8a   0x00001f8a   0x00000002   PAD
    0x00001f8c   0x00001f8c   0x00000014   Code   RO          643    .text.osRtxThreadReadyPut  RTX_CM4F.lib(rtx_thread.o)
    0x00001fa0   0x00001fa0   0x00000014   Code   RO          647    .text.osRtxThreadRegPtr  RTX_CM4F.lib(rtx_thread.o)
    0x00001fb4   0x00001fb4   0x00000034   Code   RO          663    .text.osRtxThreadStartup  RTX_CM4F.lib(rtx_thread.o)
    0x00001fe8   0x00001fe8   0x0000000c   Code   RO          649    .text.osRtxThreadSwitch  RTX_CM4F.lib(rtx_thread.o)
    0x00001ff4   0x00001ff4   0x0000003c   Code   RO          659    .text.osRtxThreadWaitEnter  RTX_CM4F.lib(rtx_thread.o)
    0x00002030   0x00002030   0x00000030   Code   RO          655    .text.osRtxThreadWaitExit  RTX_CM4F.lib(rtx_thread.o)
    0x00002060   0x00002060   0x00000078   Code   RO         1018    .text.osRtxTick_Handler  RTX_CM4F.lib(rtx_system.o)
    0x000020d8   0x000020d8   0x00000020   Code   RO          795    .text.osRtxTimerSetup  RTX_CM4F.lib(rtx_timer.o)
    0x000020f8   0x000020f8   0x00000020   Code   RO          799    .text.osRtxTimerThread  RTX_CM4F.lib(rtx_timer.o)
    0x00002118   0x00002118   0x00000070   Code   RO          797    .text.osRtxTimerTick  RTX_CM4F.lib(rtx_timer.o)
    0x00002188   0x00002188   0x0000000c   Code   RO          695    .text.osThreadExit  RTX_CM4F.lib(rtx_thread.o)
    0x00002194   0x00002194   0x00000024   Code   RO          667    .text.osThreadNew   RTX_CM4F.lib(rtx_thread.o)
    0x000021b8   0x000021b8   0x00000024   Code   RO          681    .text.osThreadSetPriority  RTX_CM4F.lib(rtx_thread.o)
    0x000021dc   0x000021dc   0x00000024   Code   RO          685    .text.osThreadYield  RTX_CM4F.lib(rtx_thread.o)
    0x00002200   0x00002200   0x00000016   Code   RO          783    .text.svcRtxDelay   RTX_CM4F.lib(rtx_delay.o)
    0x00002216   0x00002216   0x00000002   PAD
    0x00002218   0x00002218   0x0000000c   Code   RO          575    .text.svcRtxKernelGetState  RTX_CM4F.lib(rtx_kernel.o)
    0x00002224   0x00002224   0x000000fc   Code   RO          605    .text.svcRtxKernelInitialize  RTX_CM4F.lib(rtx_kernel.o)
    0x00002320   0x00002320   0x0000008c   Code   RO          607    .text.svcRtxKernelStart  RTX_CM4F.lib(rtx_kernel.o)
    0x000023ac   0x000023ac   0x000000cc   Code   RO          881    .text.svcRtxMessageQueueGet  RTX_CM4F.lib(rtx_msgqueue.o)
    0x00002478   0x00002478   0x00000118   Code   RO          839    .text.svcRtxMessageQueueNew  RTX_CM4F.lib(rtx_msgqueue.o)
    0x00002590   0x00002590   0x000000a8   Code   RO          877    .text.svcRtxMessageQueuePut  RTX_CM4F.lib(rtx_msgqueue.o)
    0x00002638   0x00002638   0x0000004c   Code   RO          741    .text.svcRtxThreadExit  RTX_CM4F.lib(rtx_thread.o)
    0x00002684   0x00002684   0x000001ec   Code   RO          665    .text.svcRtxThreadNew  RTX_CM4F.lib(rtx_thread.o)
    0x00002870   0x00002870   0x00000048   Code   RO          723    .text.svcRtxThreadSetPriority  RTX_CM4F.lib(rtx_thread.o)
    0x000028b8   0x000028b8   0x00000038   Code   RO          727    .text.svcRtxThreadYield  RTX_CM4F.lib(rtx_thread.o)
    0x000028f0   0x000028f0   0x00000064   Code   RO          127    i.IntEnable         driverlib.lib(interrupt.o)
    0x00002954   0x00002954   0x0000000e   Code   RO          130    i.IntMasterEnable   driverlib.lib(interrupt.o)
    0x00002962   0x00002962   0x00000002   PAD
    0x00002964   0x00002964   0x00000034   Code   RO          139    i.IntRegister       driverlib.lib(interrupt.o)
    0x00002998   0x00002998   0x00000004   Code   RO          288    i.UARTIntClear      driverlib.lib(uart.o)
    0x0000299c   0x0000299c   0x00000008   Code   RO          290    i.UARTIntEnable     driverlib.lib(uart.o)
    0x000029a4   0x000029a4   0x0000000e   Code   RO         1091    i.__scatterload_copy  mc_w.l(handlers.o)
    0x000029b2   0x000029b2   0x00000002   Code   RO         1092    i.__scatterload_null  mc_w.l(handlers.o)
    0x000029b4   0x000029b4   0x0000000e   Code   RO         1093    i.__scatterload_zeroinit  mc_w.l(handlers.o)
    0x000029c2   0x000029c2   0x00000002   PAD
    0x000029c4   0x000029c4   0x0000010c   Data   RO          143    .constdata          driverlib.lib(interrupt.o)
    0x00002ad0   0x00002ad0   0x00000070   Data   RO           81    .rodata             rtx_lib.o
    0x00002b40   0x00002b40   0x00000038   Data   RO           84    .rodata             rtx_lib.o
    0x00002b78   0x00002b78   0x00000004   Data   RO           83    .rodata.osRtxUserSVC  rtx_lib.o
    0x00002b7c   0x00002b7c   0x00000024   Data   RO           78    .rodata.os_idle_thread_attr  rtx_lib.o
    0x00002ba0   0x00002ba0   0x00000018   Data   RO           80    .rodata.os_timer_mq_attr  rtx_lib.o
    0x00002bb8   0x00002bb8   0x00000024   Data   RO           79    .rodata.os_timer_thread_attr  rtx_lib.o
    0x00002bdc   0x00002bdc   0x0000000a   Data   RO           49    .rodata.str1.1      main.o
    0x00002be6   0x00002be6   0x00000002   PAD
    0x00002be8   0x00002be8   0x0000000b   Data   RO          625    .rodata.str1.4      RTX_CM4F.lib(rtx_kernel.o)
    0x00002bf3   0x00002bf3   0x00000001   PAD
    0x00002bf4   0x00002bf4   0x00000020   Data   RO         1090    Region$$Table       anon$$obj.o


    Execution Region ER_RW (Exec base: 0x20000000, Load base: 0x00003000, Size: 0x0000066c, Max: 0xffffffff, ABSOLUTE, COMPRESSED[0x0000001c])

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x20000000   COMPRESSED   0x00000004   Data   RW          119    .data.SystemCoreClock  system_tm4c129.o
    0x20000004   COMPRESSED   0x000000a4   Data   RW          626    .data.os            RTX_CM4F.lib(rtx_kernel.o)
    0x200000a8   COMPRESSED   0x00000358   PAD
    0x20000400   COMPRESSED   0x0000026c   Data   RW          144    vtable              driverlib.lib(interrupt.o)


    Execution Region ER_ZI (Exec base: 0x20000670, Load base: 0x0000301c, Size: 0x000087a8, Max: 0xffffffff, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x20000670        -       0x00000018   Zero   RW           47    .bss.elevators      main.o
    0x20000688        -       0x00008040   Zero   RW           77    .bss.os             rtx_lib.o
    0x200086c8        -       0x00000001   Zero   RW         1050    .bss.os             RTX_CM4F.lib(os_systick.o)
    0x200086c9   0x0000301c   0x00000003   PAD
    0x200086cc        -       0x00000034   Zero   RW           88    .bss.os.msgqueue.cb  rtx_lib.o
    0x20008700        -       0x00000050   Zero   RW           89    .bss.os.msgqueue.mem  rtx_lib.o
    0x20008750        -       0x00000088   Zero   RW           85    .bss.os.thread.cb   rtx_lib.o
    0x200087d8        -       0x00000200   Zero   RW           86    .bss.os.thread.idle.stack  rtx_lib.o
    0x200089d8        -       0x00000200   Zero   RW           87    .bss.os.thread.timer.stack  rtx_lib.o
    0x20008bd8        -       0x00000004   Zero   RW           41    .bss.qidCentralCommands  main.o
    0x20008bdc        -       0x00000004   Zero   RW           42    .bss.qidCentralResponses  main.o
    0x20008be0        -       0x00000004   Zero   RW           40    .bss.qidController  main.o
    0x20008be4        -       0x00000004   Zero   RW           43    .bss.qidLeftCommands  main.o
    0x20008be8        -       0x00000004   Zero   RW           44    .bss.qidLeftResponses  main.o
    0x20008bec        -       0x00000004   Zero   RW           45    .bss.qidRightCommands  main.o
    0x20008bf0        -       0x00000004   Zero   RW           46    .bss.qidRightResponses  main.o
    0x20008bf4        -       0x00000004   Zero   RW           36    .bss.tidCentral     main.o
    0x20008bf8        -       0x00000004   Zero   RW           39    .bss.tidController  main.o
    0x20008bfc        -       0x00000004   Zero   RW           37    .bss.tidLeft        main.o
    0x20008c00        -       0x00000004   Zero   RW           38    .bss.tidRight       main.o
    0x20008c04        -       0x00000010   Zero   RW           48    .bss.uartMsg        main.o
    0x20008c14   0x0000301c   0x00000004   PAD
    0x20008c18        -       0x00000200   Zero   RW          105    STACK               startup_tm4c129.o


==============================================================================

Image component sizes


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Object Name

      3712          0         10          0         84       8399   main.o
        54          6          0          0          0        735   rtx_config.o
         0          0        268          0      34124       5604   rtx_lib.o
       276          8        512          0        512       6056   startup_tm4c129.o
        36          0          0          4          0       1420   system_tm4c129.o
       324          0          0          0          0       1555   uart.o

    ----------------------------------------------------------------------
      4424         14        824          4      34724      23769   Object Totals
         0          0         32          0          0          0   (incl. Generated)
        22          0          2          0          4          0   (incl. Padding)

    ----------------------------------------------------------------------

      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Library Member Name

       200         12          0          0          0        634   irq_armv7m.o
       114         20          0          0          1       3199   os_systick.o
        58          4          0          0          0       2797   rtx_delay.o
       556         44         11        164          0      16781   rtx_kernel.o
       228          0          0          0          0       2590   rtx_memory.o
       188          0          0          0          0      16188   rtx_mempool.o
      1332         28          0          0          0      18765   rtx_msgqueue.o
       144          0          0          0          0      10068   rtx_mutex.o
       368         18          0          0          0       5444   rtx_system.o
      1840         60          0          0          0      32486   rtx_thread.o
       248         16          0          0          0      10433   rtx_timer.o
        38          0          0          0          0        572   cpu.o
       166         16        268        620          0       7160   interrupt.o
        12          0          0          0          0        975   uart.o
        58          0          0          0          0          0   __dczerorl.o
         0          0          0          0          0          0   entry.o
         0          0          0          0          0          0   entry10a.o
         0          0          0          0          0          0   entry11a.o
         8          4          0          0          0          0   entry2.o
         4          0          0          0          0          0   entry5.o
         0          0          0          0          0          0   entry7b.o
         0          0          0          0          0          0   entry8b.o
         8          4          0          0          0          0   entry9a.o
        30          0          0          0          0          0   handlers.o
        36          8          0          0          0         68   init.o
        36          0          0          0          0         68   memcpya.o
        36          0          0          0          0        108   memseta.o
         8          0          0          0          0         68   siabs.o
        18          0          0          0          0         68   strcpy.o

    ----------------------------------------------------------------------
      5756        234        280       1640          4     128472   Library Totals
        22          0          1        856          3          0   (incl. Padding)

    ----------------------------------------------------------------------

      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Library Name

      5276        202         11        164          1     119385   RTX_CM4F.lib
       216         16        268        620          0       8707   driverlib.lib
       242         16          0          0          0        380   mc_w.l

    ----------------------------------------------------------------------
      5756        234        280       1640          4     128472   Library Totals

    ----------------------------------------------------------------------

==============================================================================


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   

     10180        248       1104       1644      34728     151961   Grand Totals
     10180        248       1104         28      34728     151961   ELF Image Totals (compressed)
     10180        248       1104         28          0          0   ROM Totals

==============================================================================

    Total RO  Size (Code + RO Data)                11284 (  11.02kB)
    Total RW  Size (RW Data + ZI Data)             36372 (  35.52kB)
    Total ROM Size (Code + RO Data + RW Data)      11312 (  11.05kB)

==============================================================================

